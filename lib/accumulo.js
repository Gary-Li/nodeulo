// Generated by CoffeeScript 1.7.1
(function() {
  var Accumulo, BatchWriter, Mutation, Range, accumuloProxy, accumuloTypes, protocol, thrift, transport;

  thrift = require('./thrift');

  accumuloProxy = require('./thrift-generated/AccumuloProxy');

  accumuloTypes = require('./thrift-generated/proxy_types');

  Range = require('./range').Range;

  Mutation = require('./mutation').Mutation;

  BatchWriter = require('./batchwriter').BatchWriter;

  transport = thrift.TFramedTransport;

  protocol = thrift.TBinaryProtocol;

  Accumulo = (function() {
    function Accumulo(options) {
      var _ref, _ref1, _ref2, _ref3;
      this.host = (_ref = options.host) != null ? _ref : 'localhost';
      this.port = (_ref1 = options.port) != null ? _ref1 : 42424;
      this.user = (_ref2 = options.user) != null ? _ref2 : 'root';
      this.password = (_ref3 = options.password) != null ? _ref3 : 'secret';
      this.connection = void 0;
      this.proxy = void 0;
      this.login = void 0;
    }

    Accumulo.prototype.connect = function(callback) {
      this.connection = thrift.createConnection(this.host, this.port, {
        transport: transport,
        protocol: protocol
      });
      this.proxy = thrift.createClient(accumuloProxy, this.connection);
      return this.proxy.login(this.user, {
        password: this.password
      }, function(err, conn) {
        this.login = conn;
        return callback(err, this.login);
      });
    };

    Accumulo.prototype.close = function() {
      return this.connection.end();
    };

    Accumulo.prototype.listTables = function(callback) {
      return this.proxy.listTables(this.login, callback);
    };

    Accumulo.prototype.tableExists = function(table, callback) {
      return this.proxy.tableExists(this.login, table, callback);
    };

    Accumulo.prototype.createTable = function(table, callback) {
      this.proxy.createTable(this.login, table);
      return callback;
    };

    Accumulo.prototype.deleteTable = function(table, callback) {
      return this.proxy.deleteTable(this.login, table, callback);
    };

    Accumulo.prototype.renameTable = function(oldTable, newTable, callback) {
      return this.proxy.renameTable(this.login, oldTable, newTable, callback);
    };

    Accumulo.prototype.getScanColumns = function(cols) {
      var col, columns, sc, _i, _len;
      columns = null;
      if (cols) {
        columns = [];
        for (_i = 0, _len = cols.length; _i < _len; _i++) {
          col = cols[_i];
          sc = new accumuloTypes.ScanColumn();
          sc.colFamily = col.columnFamily;
          sc.colQualifier = col.columnQualifier;
          columns.push(sc);
        }
      }
      return columns;
    };

    Accumulo.prototype.getRange = function(r) {
      var _ref;
      return (_ref = r.out()) != null ? _ref : null;
    };

    Accumulo.prototype.getIteratorSettings = function(iters) {
      var i, iterators, _i, _len;
      iterators = null;
      if (iters) {
        iterators = [];
        for (_i = 0, _len = iters.length; _i < _len; _i++) {
          i = iters[_i];
          iterators.push(i.getIteratorSetting());
        }
      }
      return iterators;
    };

    Accumulo.prototype.scan = function(options, callback) {
      var scanOptions;
      scanOptions = new accumuloTypes.ScanOptions();
      scanOptions.range = getRange(options.scanrange);
      scanOptions.columns = getScanColumns(options.columns);
      scanOptions.iterators = getIteratorSettings(options.iterators);
      return this.proxy.createScanner(this.login, options.table, scanOptions, function(err, scanner) {
        return performScan(scanner, options.batchSize, function(results) {
          return callback(null, results);
        });
      });
    };

    Accumulo.prototype.performScan = function(scanner, batchSize, callback) {
      var obj;
      obj = [];
      return scanAll(scanner, batchSize, obj, function(results) {
        return callback(results);
      });
    };

    Accumulo.prototype.scanAll = function(scanner, batchSize, obj, callback) {
      return this.proxy.nextK(scanner, batchSize, function(err, ret) {
        var item, _i, _len, _ref;
        if (err) {
          console.log(err);
        }
        _ref = ret.results;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          obj.push(item);
        }
        if (ret.more) {
          return scanAll(scanner, batchSize, obj, callback);
        } else {
          return callback(obj);
        }
      });
    };

    Accumulo.prototype.write = function(table, mutations, callback) {
      return this.createBatchWriter(table, function(bw) {
        return bw.addMutations(mutations(function(res) {
          return bw.flush(function() {
            return bw.close(callback);
          });
        }));
      });
    };

    Accumulo.prototype.createBatchWriter = function(table, callback) {
      var bw;
      return bw = new BatchWriter(options(function() {
        return callback(bw);
      }));
    };

    return Accumulo;

  })();

  exports.Accumulo = Accumulo;

}).call(this);
