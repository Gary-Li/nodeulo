// Generated by CoffeeScript 1.7.1
(function() {
  var BatchWriter, accumuloProxy, accumuloTypes;

  accumuloProxy = require('./thrift-generated/AccumuloProxy');

  accumuloTypes = require('./thrift-generated/proxy_types');

  BatchWriter = (function() {
    function BatchWriter(options, callback) {
      var writerOptions, _ref, _ref1, _ref2, _ref3;
      this.connection = options.connection;
      writerOptions = new accumuloTypes.WriterOptions();
      writerOptions.maxMemory = (_ref = options.maxMemory) != null ? _ref : 10 * 1024;
      writerOptions.latencyMs = (_ref1 = options.latency) != null ? _ref1 : 30 * 1000;
      writerOptions.timeoutMs = (_ref2 = options.timeout) != null ? _ref2 : 5 * 1000;
      writerOptions.threads = (_ref3 = options.threads) != null ? _ref3 : 10;
      this.isClosed = false;
      this.writer = void 0;
      this.connection.getProxy().createWriter(this.connection.getLogin(), options.table, writerOptions, function(err, w) {
        this.writer = w;
        return callback(w);
      });
    }

    BatchWriter.prototype.addMutations = function(mutations, callback) {
      var cells, mut, update, _i, _j, _len, _len1, _ref, _ref1;
      if (this.isClosed) {
        throw "Can't write to a closed writer";
      }
      cells = {};
      for (_i = 0, _len = mutations.length; _i < _len; _i++) {
        mut = mutations[_i];
        cells[mut.row] = (_ref = cells[mut.row]) != null ? _ref : [];
        _ref1 = mut.updates;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          update = _ref1[_j];
          cells[mut.row].push(update);
        }
      }
      this.connection.getProxy().update(this.writer, cells);
      return callback;
    };

    BatchWriter.prototype.addMutation = function(mutation, callback) {
      var cells;
      if (this.isClosed) {
        throw "Can't write to a closed writer";
      }
      cells = {};
      cells[mutation.row] = mutation.updates;
      this.connection.getProxy().update(this.writer, cells);
      return callback;
    };

    BatchWriter.prototype.flush = function(callback) {
      if (this.isClosed) {
        throw "Can't write to a closed writer";
      }
      this.connection.getProxy().flush(this.writer);
      return callback;
    };

    BatchWriter.prototype.close = function(callback) {
      this.connection.getProxy().closeWriter(this.writer);
      this.isClosed = true;
      return callback;
    };

    return BatchWriter;

  })();

  exports.BatchWriter = BatchWriter;

}).call(this);
