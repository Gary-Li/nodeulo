//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./proxy_types');
//HELPER FUNCTIONS AND STRUCTURES

AccumuloProxy_login_args = function(args) {
  this.principal = null;
  this.loginProperties = null;
  if (args) {
    if (args.principal !== undefined) {
      this.principal = args.principal;
    }
    if (args.loginProperties !== undefined) {
      this.loginProperties = args.loginProperties;
    }
  }
};
AccumuloProxy_login_args.prototype = {};
AccumuloProxy_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size114 = 0;
        var _rtmp3118;
        this.loginProperties = {};
        var _ktype115 = 0;
        var _vtype116 = 0;
        _rtmp3118 = input.readMapBegin();
        _ktype115 = _rtmp3118.ktype;
        _vtype116 = _rtmp3118.vtype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var key120 = null;
          var val121 = null;
          key120 = input.readString();
          val121 = input.readString();
          this.loginProperties[key120] = val121;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_login_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_login_args');
  if (this.principal !== null && this.principal !== undefined) {
    output.writeFieldBegin('principal', Thrift.Type.STRING, 1);
    output.writeString(this.principal);
    output.writeFieldEnd();
  }
  if (this.loginProperties !== null && this.loginProperties !== undefined) {
    output.writeFieldBegin('loginProperties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.loginProperties));
    for (var kiter122 in this.loginProperties)
    {
      if (this.loginProperties.hasOwnProperty(kiter122))
      {
        var viter123 = this.loginProperties[kiter122];
        output.writeString(kiter122);
        output.writeString(viter123);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_login_result = function(args) {
  this.success = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_login_result.prototype = {};
AccumuloProxy_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_login_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 1);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_addConstraint_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.constraintClassName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.constraintClassName !== undefined) {
      this.constraintClassName = args.constraintClassName;
    }
  }
};
AccumuloProxy_addConstraint_args.prototype = {};
AccumuloProxy_addConstraint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.constraintClassName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_addConstraint_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_addConstraint_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.constraintClassName !== null && this.constraintClassName !== undefined) {
    output.writeFieldBegin('constraintClassName', Thrift.Type.STRING, 3);
    output.writeString(this.constraintClassName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_addConstraint_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_addConstraint_result.prototype = {};
AccumuloProxy_addConstraint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_addConstraint_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_addConstraint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_addSplits_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.splits = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.splits !== undefined) {
      this.splits = args.splits;
    }
  }
};
AccumuloProxy_addSplits_args.prototype = {};
AccumuloProxy_addSplits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size124 = 0;
        var _rtmp3128;
        this.splits = [];
        var _etype127 = 0;
        _rtmp3128 = input.readSetBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = input.readString();
          this.splits.push(elem130);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_addSplits_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_addSplits_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.splits !== null && this.splits !== undefined) {
    output.writeFieldBegin('splits', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.splits.length);
    for (var iter131 in this.splits)
    {
      if (this.splits.hasOwnProperty(iter131))
      {
        iter131 = this.splits[iter131];
        output.writeString(iter131);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_addSplits_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_addSplits_result.prototype = {};
AccumuloProxy_addSplits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_addSplits_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_addSplits_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_attachIterator_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.setting = null;
  this.scopes = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.setting !== undefined) {
      this.setting = args.setting;
    }
    if (args.scopes !== undefined) {
      this.scopes = args.scopes;
    }
  }
};
AccumuloProxy_attachIterator_args.prototype = {};
AccumuloProxy_attachIterator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.setting = new ttypes.IteratorSetting();
        this.setting.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size132 = 0;
        var _rtmp3136;
        this.scopes = [];
        var _etype135 = 0;
        _rtmp3136 = input.readSetBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = input.readI32();
          this.scopes.push(elem138);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_attachIterator_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_attachIterator_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.setting !== null && this.setting !== undefined) {
    output.writeFieldBegin('setting', Thrift.Type.STRUCT, 3);
    this.setting.write(output);
    output.writeFieldEnd();
  }
  if (this.scopes !== null && this.scopes !== undefined) {
    output.writeFieldBegin('scopes', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.scopes.length);
    for (var iter139 in this.scopes)
    {
      if (this.scopes.hasOwnProperty(iter139))
      {
        iter139 = this.scopes[iter139];
        output.writeI32(iter139);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_attachIterator_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_attachIterator_result.prototype = {};
AccumuloProxy_attachIterator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloSecurityException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_attachIterator_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_attachIterator_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_checkIteratorConflicts_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.setting = null;
  this.scopes = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.setting !== undefined) {
      this.setting = args.setting;
    }
    if (args.scopes !== undefined) {
      this.scopes = args.scopes;
    }
  }
};
AccumuloProxy_checkIteratorConflicts_args.prototype = {};
AccumuloProxy_checkIteratorConflicts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.setting = new ttypes.IteratorSetting();
        this.setting.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size140 = 0;
        var _rtmp3144;
        this.scopes = [];
        var _etype143 = 0;
        _rtmp3144 = input.readSetBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = input.readI32();
          this.scopes.push(elem146);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_checkIteratorConflicts_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_checkIteratorConflicts_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.setting !== null && this.setting !== undefined) {
    output.writeFieldBegin('setting', Thrift.Type.STRUCT, 3);
    this.setting.write(output);
    output.writeFieldEnd();
  }
  if (this.scopes !== null && this.scopes !== undefined) {
    output.writeFieldBegin('scopes', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.scopes.length);
    for (var iter147 in this.scopes)
    {
      if (this.scopes.hasOwnProperty(iter147))
      {
        iter147 = this.scopes[iter147];
        output.writeI32(iter147);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_checkIteratorConflicts_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_checkIteratorConflicts_result.prototype = {};
AccumuloProxy_checkIteratorConflicts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloSecurityException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_checkIteratorConflicts_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_checkIteratorConflicts_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_clearLocatorCache_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_clearLocatorCache_args.prototype = {};
AccumuloProxy_clearLocatorCache_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_clearLocatorCache_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_clearLocatorCache_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_clearLocatorCache_result = function(args) {
  this.ouch1 = null;
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch1 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
  }
};
AccumuloProxy_clearLocatorCache_result.prototype = {};
AccumuloProxy_clearLocatorCache_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.TableNotFoundException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_clearLocatorCache_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_clearLocatorCache_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_cloneTable_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.newTableName = null;
  this.flush = null;
  this.propertiesToSet = null;
  this.propertiesToExclude = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.newTableName !== undefined) {
      this.newTableName = args.newTableName;
    }
    if (args.flush !== undefined) {
      this.flush = args.flush;
    }
    if (args.propertiesToSet !== undefined) {
      this.propertiesToSet = args.propertiesToSet;
    }
    if (args.propertiesToExclude !== undefined) {
      this.propertiesToExclude = args.propertiesToExclude;
    }
  }
};
AccumuloProxy_cloneTable_args.prototype = {};
AccumuloProxy_cloneTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.flush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size148 = 0;
        var _rtmp3152;
        this.propertiesToSet = {};
        var _ktype149 = 0;
        var _vtype150 = 0;
        _rtmp3152 = input.readMapBegin();
        _ktype149 = _rtmp3152.ktype;
        _vtype150 = _rtmp3152.vtype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var key154 = null;
          var val155 = null;
          key154 = input.readString();
          val155 = input.readString();
          this.propertiesToSet[key154] = val155;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size156 = 0;
        var _rtmp3160;
        this.propertiesToExclude = [];
        var _etype159 = 0;
        _rtmp3160 = input.readSetBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = input.readString();
          this.propertiesToExclude.push(elem162);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_cloneTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_cloneTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.newTableName !== null && this.newTableName !== undefined) {
    output.writeFieldBegin('newTableName', Thrift.Type.STRING, 3);
    output.writeString(this.newTableName);
    output.writeFieldEnd();
  }
  if (this.flush !== null && this.flush !== undefined) {
    output.writeFieldBegin('flush', Thrift.Type.BOOL, 4);
    output.writeBool(this.flush);
    output.writeFieldEnd();
  }
  if (this.propertiesToSet !== null && this.propertiesToSet !== undefined) {
    output.writeFieldBegin('propertiesToSet', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.propertiesToSet));
    for (var kiter163 in this.propertiesToSet)
    {
      if (this.propertiesToSet.hasOwnProperty(kiter163))
      {
        var viter164 = this.propertiesToSet[kiter163];
        output.writeString(kiter163);
        output.writeString(viter164);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.propertiesToExclude !== null && this.propertiesToExclude !== undefined) {
    output.writeFieldBegin('propertiesToExclude', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRING, this.propertiesToExclude.length);
    for (var iter165 in this.propertiesToExclude)
    {
      if (this.propertiesToExclude.hasOwnProperty(iter165))
      {
        iter165 = this.propertiesToExclude[iter165];
        output.writeString(iter165);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_cloneTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  this.ouch4 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args instanceof ttypes.TableExistsException) {
    this.ouch4 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
    if (args.ouch4 !== undefined) {
      this.ouch4 = args.ouch4;
    }
  }
};
AccumuloProxy_cloneTable_result.prototype = {};
AccumuloProxy_cloneTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch4 = new ttypes.TableExistsException();
        this.ouch4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_cloneTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_cloneTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch4 !== null && this.ouch4 !== undefined) {
    output.writeFieldBegin('ouch4', Thrift.Type.STRUCT, 4);
    this.ouch4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_compactTable_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.startRow = null;
  this.endRow = null;
  this.iterators = null;
  this.flush = null;
  this.wait = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
    if (args.iterators !== undefined) {
      this.iterators = args.iterators;
    }
    if (args.flush !== undefined) {
      this.flush = args.flush;
    }
    if (args.wait !== undefined) {
      this.wait = args.wait;
    }
  }
};
AccumuloProxy_compactTable_args.prototype = {};
AccumuloProxy_compactTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size166 = 0;
        var _rtmp3170;
        this.iterators = [];
        var _etype169 = 0;
        _rtmp3170 = input.readListBegin();
        _etype169 = _rtmp3170.etype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var elem172 = null;
          elem172 = new ttypes.IteratorSetting();
          elem172.read(input);
          this.iterators.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.flush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.wait = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_compactTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_compactTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 3);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.endRow !== null && this.endRow !== undefined) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 4);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  if (this.iterators !== null && this.iterators !== undefined) {
    output.writeFieldBegin('iterators', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.iterators.length);
    for (var iter173 in this.iterators)
    {
      if (this.iterators.hasOwnProperty(iter173))
      {
        iter173 = this.iterators[iter173];
        iter173.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.flush !== null && this.flush !== undefined) {
    output.writeFieldBegin('flush', Thrift.Type.BOOL, 6);
    output.writeBool(this.flush);
    output.writeFieldEnd();
  }
  if (this.wait !== null && this.wait !== undefined) {
    output.writeFieldBegin('wait', Thrift.Type.BOOL, 7);
    output.writeBool(this.wait);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_compactTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_compactTable_result.prototype = {};
AccumuloProxy_compactTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloSecurityException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.TableNotFoundException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.AccumuloException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_compactTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_compactTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_cancelCompaction_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_cancelCompaction_args.prototype = {};
AccumuloProxy_cancelCompaction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_cancelCompaction_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_cancelCompaction_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_cancelCompaction_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_cancelCompaction_result.prototype = {};
AccumuloProxy_cancelCompaction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloSecurityException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.TableNotFoundException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.AccumuloException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_cancelCompaction_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_cancelCompaction_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createTable_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.versioningIter = null;
  this.type = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.versioningIter !== undefined) {
      this.versioningIter = args.versioningIter;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
AccumuloProxy_createTable_args.prototype = {};
AccumuloProxy_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.versioningIter = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.versioningIter !== null && this.versioningIter !== undefined) {
    output.writeFieldBegin('versioningIter', Thrift.Type.BOOL, 3);
    output.writeBool(this.versioningIter);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableExistsException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_createTable_result.prototype = {};
AccumuloProxy_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableExistsException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_deleteTable_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_deleteTable_args.prototype = {};
AccumuloProxy_deleteTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_deleteTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_deleteTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_deleteTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_deleteTable_result.prototype = {};
AccumuloProxy_deleteTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_deleteTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_deleteTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_deleteRows_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.startRow = null;
  this.endRow = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
  }
};
AccumuloProxy_deleteRows_args.prototype = {};
AccumuloProxy_deleteRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_deleteRows_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_deleteRows_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 3);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.endRow !== null && this.endRow !== undefined) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 4);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_deleteRows_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_deleteRows_result.prototype = {};
AccumuloProxy_deleteRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_deleteRows_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_deleteRows_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_exportTable_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.exportDir = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.exportDir !== undefined) {
      this.exportDir = args.exportDir;
    }
  }
};
AccumuloProxy_exportTable_args.prototype = {};
AccumuloProxy_exportTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.exportDir = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_exportTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_exportTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.exportDir !== null && this.exportDir !== undefined) {
    output.writeFieldBegin('exportDir', Thrift.Type.STRING, 3);
    output.writeString(this.exportDir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_exportTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_exportTable_result.prototype = {};
AccumuloProxy_exportTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_exportTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_exportTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_flushTable_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.startRow = null;
  this.endRow = null;
  this.wait = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
    if (args.wait !== undefined) {
      this.wait = args.wait;
    }
  }
};
AccumuloProxy_flushTable_args.prototype = {};
AccumuloProxy_flushTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.wait = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_flushTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_flushTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 3);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.endRow !== null && this.endRow !== undefined) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 4);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  if (this.wait !== null && this.wait !== undefined) {
    output.writeFieldBegin('wait', Thrift.Type.BOOL, 5);
    output.writeBool(this.wait);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_flushTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_flushTable_result.prototype = {};
AccumuloProxy_flushTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_flushTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_flushTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getLocalityGroups_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_getLocalityGroups_args.prototype = {};
AccumuloProxy_getLocalityGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getLocalityGroups_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getLocalityGroups_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getLocalityGroups_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_getLocalityGroups_result.prototype = {};
AccumuloProxy_getLocalityGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size174 = 0;
        var _rtmp3178;
        this.success = {};
        var _ktype175 = 0;
        var _vtype176 = 0;
        _rtmp3178 = input.readMapBegin();
        _ktype175 = _rtmp3178.ktype;
        _vtype176 = _rtmp3178.vtype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          var key180 = null;
          var val181 = null;
          key180 = input.readString();
          var _size182 = 0;
          var _rtmp3186;
          val181 = [];
          var _etype185 = 0;
          _rtmp3186 = input.readSetBegin();
          _etype185 = _rtmp3186.etype;
          _size182 = _rtmp3186.size;
          for (var _i187 = 0; _i187 < _size182; ++_i187)
          {
            var elem188 = null;
            elem188 = input.readString();
            val181.push(elem188);
          }
          input.readSetEnd();
          this.success[key180] = val181;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getLocalityGroups_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getLocalityGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
    for (var kiter189 in this.success)
    {
      if (this.success.hasOwnProperty(kiter189))
      {
        var viter190 = this.success[kiter189];
        output.writeString(kiter189);
        output.writeSetBegin(Thrift.Type.STRING, viter190.length);
        for (var iter191 in viter190)
        {
          if (viter190.hasOwnProperty(iter191))
          {
            iter191 = viter190[iter191];
            output.writeString(iter191);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getIteratorSetting_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.iteratorName = null;
  this.scope = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.iteratorName !== undefined) {
      this.iteratorName = args.iteratorName;
    }
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
  }
};
AccumuloProxy_getIteratorSetting_args.prototype = {};
AccumuloProxy_getIteratorSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.iteratorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getIteratorSetting_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getIteratorSetting_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.iteratorName !== null && this.iteratorName !== undefined) {
    output.writeFieldBegin('iteratorName', Thrift.Type.STRING, 3);
    output.writeString(this.iteratorName);
    output.writeFieldEnd();
  }
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 4);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getIteratorSetting_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_getIteratorSetting_result.prototype = {};
AccumuloProxy_getIteratorSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IteratorSetting();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getIteratorSetting_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getIteratorSetting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getMaxRow_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.auths = null;
  this.startRow = null;
  this.startInclusive = null;
  this.endRow = null;
  this.endInclusive = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.auths !== undefined) {
      this.auths = args.auths;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.startInclusive !== undefined) {
      this.startInclusive = args.startInclusive;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
    if (args.endInclusive !== undefined) {
      this.endInclusive = args.endInclusive;
    }
  }
};
AccumuloProxy_getMaxRow_args.prototype = {};
AccumuloProxy_getMaxRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size192 = 0;
        var _rtmp3196;
        this.auths = [];
        var _etype195 = 0;
        _rtmp3196 = input.readSetBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = input.readString();
          this.auths.push(elem198);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.startInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.endInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getMaxRow_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getMaxRow_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.auths !== null && this.auths !== undefined) {
    output.writeFieldBegin('auths', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.auths.length);
    for (var iter199 in this.auths)
    {
      if (this.auths.hasOwnProperty(iter199))
      {
        iter199 = this.auths[iter199];
        output.writeString(iter199);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 4);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.startInclusive !== null && this.startInclusive !== undefined) {
    output.writeFieldBegin('startInclusive', Thrift.Type.BOOL, 5);
    output.writeBool(this.startInclusive);
    output.writeFieldEnd();
  }
  if (this.endRow !== null && this.endRow !== undefined) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 6);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  if (this.endInclusive !== null && this.endInclusive !== undefined) {
    output.writeFieldBegin('endInclusive', Thrift.Type.BOOL, 7);
    output.writeBool(this.endInclusive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getMaxRow_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_getMaxRow_result.prototype = {};
AccumuloProxy_getMaxRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getMaxRow_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getMaxRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getTableProperties_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_getTableProperties_args.prototype = {};
AccumuloProxy_getTableProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getTableProperties_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getTableProperties_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getTableProperties_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_getTableProperties_result.prototype = {};
AccumuloProxy_getTableProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size200 = 0;
        var _rtmp3204;
        this.success = {};
        var _ktype201 = 0;
        var _vtype202 = 0;
        _rtmp3204 = input.readMapBegin();
        _ktype201 = _rtmp3204.ktype;
        _vtype202 = _rtmp3204.vtype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var key206 = null;
          var val207 = null;
          key206 = input.readString();
          val207 = input.readString();
          this.success[key206] = val207;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getTableProperties_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getTableProperties_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter208 in this.success)
    {
      if (this.success.hasOwnProperty(kiter208))
      {
        var viter209 = this.success[kiter208];
        output.writeString(kiter208);
        output.writeString(viter209);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_importDirectory_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.importDir = null;
  this.failureDir = null;
  this.setTime = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.importDir !== undefined) {
      this.importDir = args.importDir;
    }
    if (args.failureDir !== undefined) {
      this.failureDir = args.failureDir;
    }
    if (args.setTime !== undefined) {
      this.setTime = args.setTime;
    }
  }
};
AccumuloProxy_importDirectory_args.prototype = {};
AccumuloProxy_importDirectory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.importDir = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.failureDir = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.setTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_importDirectory_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_importDirectory_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.importDir !== null && this.importDir !== undefined) {
    output.writeFieldBegin('importDir', Thrift.Type.STRING, 3);
    output.writeString(this.importDir);
    output.writeFieldEnd();
  }
  if (this.failureDir !== null && this.failureDir !== undefined) {
    output.writeFieldBegin('failureDir', Thrift.Type.STRING, 4);
    output.writeString(this.failureDir);
    output.writeFieldEnd();
  }
  if (this.setTime !== null && this.setTime !== undefined) {
    output.writeFieldBegin('setTime', Thrift.Type.BOOL, 5);
    output.writeBool(this.setTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_importDirectory_result = function(args) {
  this.ouch1 = null;
  this.ouch3 = null;
  this.ouch4 = null;
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloException) {
    this.ouch3 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch4 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
    if (args.ouch4 !== undefined) {
      this.ouch4 = args.ouch4;
    }
  }
};
AccumuloProxy_importDirectory_result.prototype = {};
AccumuloProxy_importDirectory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.TableNotFoundException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.AccumuloException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch4 = new ttypes.AccumuloSecurityException();
        this.ouch4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_importDirectory_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_importDirectory_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 2);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch4 !== null && this.ouch4 !== undefined) {
    output.writeFieldBegin('ouch4', Thrift.Type.STRUCT, 3);
    this.ouch4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_importTable_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.importDir = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.importDir !== undefined) {
      this.importDir = args.importDir;
    }
  }
};
AccumuloProxy_importTable_args.prototype = {};
AccumuloProxy_importTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.importDir = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_importTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_importTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.importDir !== null && this.importDir !== undefined) {
    output.writeFieldBegin('importDir', Thrift.Type.STRING, 3);
    output.writeString(this.importDir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_importTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.TableExistsException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_importTable_result.prototype = {};
AccumuloProxy_importTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.TableExistsException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.AccumuloSecurityException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_importTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_importTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listSplits_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.maxSplits = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.maxSplits !== undefined) {
      this.maxSplits = args.maxSplits;
    }
  }
};
AccumuloProxy_listSplits_args.prototype = {};
AccumuloProxy_listSplits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxSplits = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listSplits_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listSplits_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.maxSplits !== null && this.maxSplits !== undefined) {
    output.writeFieldBegin('maxSplits', Thrift.Type.I32, 3);
    output.writeI32(this.maxSplits);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listSplits_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_listSplits_result.prototype = {};
AccumuloProxy_listSplits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size210 = 0;
        var _rtmp3214;
        this.success = [];
        var _etype213 = 0;
        _rtmp3214 = input.readListBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = input.readString();
          this.success.push(elem216);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listSplits_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listSplits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter217 in this.success)
    {
      if (this.success.hasOwnProperty(iter217))
      {
        iter217 = this.success[iter217];
        output.writeString(iter217);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listTables_args = function(args) {
  this.login = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
  }
};
AccumuloProxy_listTables_args.prototype = {};
AccumuloProxy_listTables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listTables_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listTables_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listTables_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AccumuloProxy_listTables_result.prototype = {};
AccumuloProxy_listTables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size218 = 0;
        var _rtmp3222;
        this.success = [];
        var _etype221 = 0;
        _rtmp3222 = input.readSetBegin();
        _etype221 = _rtmp3222.etype;
        _size218 = _rtmp3222.size;
        for (var _i223 = 0; _i223 < _size218; ++_i223)
        {
          var elem224 = null;
          elem224 = input.readString();
          this.success.push(elem224);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listTables_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listTables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter225 in this.success)
    {
      if (this.success.hasOwnProperty(iter225))
      {
        iter225 = this.success[iter225];
        output.writeString(iter225);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listIterators_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_listIterators_args.prototype = {};
AccumuloProxy_listIterators_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listIterators_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listIterators_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listIterators_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_listIterators_result.prototype = {};
AccumuloProxy_listIterators_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size226 = 0;
        var _rtmp3230;
        this.success = {};
        var _ktype227 = 0;
        var _vtype228 = 0;
        _rtmp3230 = input.readMapBegin();
        _ktype227 = _rtmp3230.ktype;
        _vtype228 = _rtmp3230.vtype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var key232 = null;
          var val233 = null;
          key232 = input.readString();
          var _size234 = 0;
          var _rtmp3238;
          val233 = [];
          var _etype237 = 0;
          _rtmp3238 = input.readSetBegin();
          _etype237 = _rtmp3238.etype;
          _size234 = _rtmp3238.size;
          for (var _i239 = 0; _i239 < _size234; ++_i239)
          {
            var elem240 = null;
            elem240 = input.readI32();
            val233.push(elem240);
          }
          input.readSetEnd();
          this.success[key232] = val233;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listIterators_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listIterators_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
    for (var kiter241 in this.success)
    {
      if (this.success.hasOwnProperty(kiter241))
      {
        var viter242 = this.success[kiter241];
        output.writeString(kiter241);
        output.writeSetBegin(Thrift.Type.I32, viter242.length);
        for (var iter243 in viter242)
        {
          if (viter242.hasOwnProperty(iter243))
          {
            iter243 = viter242[iter243];
            output.writeI32(iter243);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listConstraints_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_listConstraints_args.prototype = {};
AccumuloProxy_listConstraints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listConstraints_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listConstraints_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listConstraints_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_listConstraints_result.prototype = {};
AccumuloProxy_listConstraints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size244 = 0;
        var _rtmp3248;
        this.success = {};
        var _ktype245 = 0;
        var _vtype246 = 0;
        _rtmp3248 = input.readMapBegin();
        _ktype245 = _rtmp3248.ktype;
        _vtype246 = _rtmp3248.vtype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var key250 = null;
          var val251 = null;
          key250 = input.readString();
          val251 = input.readI32();
          this.success[key250] = val251;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listConstraints_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listConstraints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter252 in this.success)
    {
      if (this.success.hasOwnProperty(kiter252))
      {
        var viter253 = this.success[kiter252];
        output.writeString(kiter252);
        output.writeI32(viter253);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_mergeTablets_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.startRow = null;
  this.endRow = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
  }
};
AccumuloProxy_mergeTablets_args.prototype = {};
AccumuloProxy_mergeTablets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_mergeTablets_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_mergeTablets_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 3);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.endRow !== null && this.endRow !== undefined) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 4);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_mergeTablets_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_mergeTablets_result.prototype = {};
AccumuloProxy_mergeTablets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_mergeTablets_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_mergeTablets_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_offlineTable_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_offlineTable_args.prototype = {};
AccumuloProxy_offlineTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_offlineTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_offlineTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_offlineTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_offlineTable_result.prototype = {};
AccumuloProxy_offlineTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_offlineTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_offlineTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_onlineTable_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_onlineTable_args.prototype = {};
AccumuloProxy_onlineTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_onlineTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_onlineTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_onlineTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_onlineTable_result.prototype = {};
AccumuloProxy_onlineTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_onlineTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_onlineTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_removeConstraint_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.constraint = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.constraint !== undefined) {
      this.constraint = args.constraint;
    }
  }
};
AccumuloProxy_removeConstraint_args.prototype = {};
AccumuloProxy_removeConstraint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.constraint = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_removeConstraint_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_removeConstraint_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.constraint !== null && this.constraint !== undefined) {
    output.writeFieldBegin('constraint', Thrift.Type.I32, 3);
    output.writeI32(this.constraint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_removeConstraint_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_removeConstraint_result.prototype = {};
AccumuloProxy_removeConstraint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_removeConstraint_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_removeConstraint_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_removeIterator_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.iterName = null;
  this.scopes = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.iterName !== undefined) {
      this.iterName = args.iterName;
    }
    if (args.scopes !== undefined) {
      this.scopes = args.scopes;
    }
  }
};
AccumuloProxy_removeIterator_args.prototype = {};
AccumuloProxy_removeIterator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.iterName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size254 = 0;
        var _rtmp3258;
        this.scopes = [];
        var _etype257 = 0;
        _rtmp3258 = input.readSetBegin();
        _etype257 = _rtmp3258.etype;
        _size254 = _rtmp3258.size;
        for (var _i259 = 0; _i259 < _size254; ++_i259)
        {
          var elem260 = null;
          elem260 = input.readI32();
          this.scopes.push(elem260);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_removeIterator_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_removeIterator_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.iterName !== null && this.iterName !== undefined) {
    output.writeFieldBegin('iterName', Thrift.Type.STRING, 3);
    output.writeString(this.iterName);
    output.writeFieldEnd();
  }
  if (this.scopes !== null && this.scopes !== undefined) {
    output.writeFieldBegin('scopes', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.scopes.length);
    for (var iter261 in this.scopes)
    {
      if (this.scopes.hasOwnProperty(iter261))
      {
        iter261 = this.scopes[iter261];
        output.writeI32(iter261);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_removeIterator_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_removeIterator_result.prototype = {};
AccumuloProxy_removeIterator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_removeIterator_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_removeIterator_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_removeTableProperty_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.property = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
  }
};
AccumuloProxy_removeTableProperty_args.prototype = {};
AccumuloProxy_removeTableProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_removeTableProperty_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_removeTableProperty_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 3);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_removeTableProperty_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_removeTableProperty_result.prototype = {};
AccumuloProxy_removeTableProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_removeTableProperty_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_removeTableProperty_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_renameTable_args = function(args) {
  this.login = null;
  this.oldTableName = null;
  this.newTableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.oldTableName !== undefined) {
      this.oldTableName = args.oldTableName;
    }
    if (args.newTableName !== undefined) {
      this.newTableName = args.newTableName;
    }
  }
};
AccumuloProxy_renameTable_args.prototype = {};
AccumuloProxy_renameTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oldTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_renameTable_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_renameTable_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.oldTableName !== null && this.oldTableName !== undefined) {
    output.writeFieldBegin('oldTableName', Thrift.Type.STRING, 2);
    output.writeString(this.oldTableName);
    output.writeFieldEnd();
  }
  if (this.newTableName !== null && this.newTableName !== undefined) {
    output.writeFieldBegin('newTableName', Thrift.Type.STRING, 3);
    output.writeString(this.newTableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_renameTable_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  this.ouch4 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args instanceof ttypes.TableExistsException) {
    this.ouch4 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
    if (args.ouch4 !== undefined) {
      this.ouch4 = args.ouch4;
    }
  }
};
AccumuloProxy_renameTable_result.prototype = {};
AccumuloProxy_renameTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch4 = new ttypes.TableExistsException();
        this.ouch4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_renameTable_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_renameTable_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch4 !== null && this.ouch4 !== undefined) {
    output.writeFieldBegin('ouch4', Thrift.Type.STRUCT, 4);
    this.ouch4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_setLocalityGroups_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.groups = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.groups !== undefined) {
      this.groups = args.groups;
    }
  }
};
AccumuloProxy_setLocalityGroups_args.prototype = {};
AccumuloProxy_setLocalityGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size262 = 0;
        var _rtmp3266;
        this.groups = {};
        var _ktype263 = 0;
        var _vtype264 = 0;
        _rtmp3266 = input.readMapBegin();
        _ktype263 = _rtmp3266.ktype;
        _vtype264 = _rtmp3266.vtype;
        _size262 = _rtmp3266.size;
        for (var _i267 = 0; _i267 < _size262; ++_i267)
        {
          var key268 = null;
          var val269 = null;
          key268 = input.readString();
          var _size270 = 0;
          var _rtmp3274;
          val269 = [];
          var _etype273 = 0;
          _rtmp3274 = input.readSetBegin();
          _etype273 = _rtmp3274.etype;
          _size270 = _rtmp3274.size;
          for (var _i275 = 0; _i275 < _size270; ++_i275)
          {
            var elem276 = null;
            elem276 = input.readString();
            val269.push(elem276);
          }
          input.readSetEnd();
          this.groups[key268] = val269;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_setLocalityGroups_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_setLocalityGroups_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.groups));
    for (var kiter277 in this.groups)
    {
      if (this.groups.hasOwnProperty(kiter277))
      {
        var viter278 = this.groups[kiter277];
        output.writeString(kiter277);
        output.writeSetBegin(Thrift.Type.STRING, viter278.length);
        for (var iter279 in viter278)
        {
          if (viter278.hasOwnProperty(iter279))
          {
            iter279 = viter278[iter279];
            output.writeString(iter279);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_setLocalityGroups_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_setLocalityGroups_result.prototype = {};
AccumuloProxy_setLocalityGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_setLocalityGroups_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_setLocalityGroups_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_setTableProperty_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.property = null;
  this.value = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
AccumuloProxy_setTableProperty_args.prototype = {};
AccumuloProxy_setTableProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_setTableProperty_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_setTableProperty_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 3);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_setTableProperty_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_setTableProperty_result.prototype = {};
AccumuloProxy_setTableProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_setTableProperty_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_setTableProperty_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_splitRangeByTablets_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.range = null;
  this.maxSplits = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    }
    if (args.maxSplits !== undefined) {
      this.maxSplits = args.maxSplits;
    }
  }
};
AccumuloProxy_splitRangeByTablets_args.prototype = {};
AccumuloProxy_splitRangeByTablets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.Range();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxSplits = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_splitRangeByTablets_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_splitRangeByTablets_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 3);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.maxSplits !== null && this.maxSplits !== undefined) {
    output.writeFieldBegin('maxSplits', Thrift.Type.I32, 4);
    output.writeI32(this.maxSplits);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_splitRangeByTablets_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_splitRangeByTablets_result.prototype = {};
AccumuloProxy_splitRangeByTablets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size280 = 0;
        var _rtmp3284;
        this.success = [];
        var _etype283 = 0;
        _rtmp3284 = input.readSetBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = new ttypes.Range();
          elem286.read(input);
          this.success.push(elem286);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_splitRangeByTablets_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_splitRangeByTablets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter287 in this.success)
    {
      if (this.success.hasOwnProperty(iter287))
      {
        iter287 = this.success[iter287];
        iter287.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_tableExists_args = function(args) {
  this.login = null;
  this.tableName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AccumuloProxy_tableExists_args.prototype = {};
AccumuloProxy_tableExists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_tableExists_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_tableExists_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_tableExists_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AccumuloProxy_tableExists_result.prototype = {};
AccumuloProxy_tableExists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_tableExists_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_tableExists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_tableIdMap_args = function(args) {
  this.login = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
  }
};
AccumuloProxy_tableIdMap_args.prototype = {};
AccumuloProxy_tableIdMap_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_tableIdMap_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_tableIdMap_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_tableIdMap_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AccumuloProxy_tableIdMap_result.prototype = {};
AccumuloProxy_tableIdMap_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size288 = 0;
        var _rtmp3292;
        this.success = {};
        var _ktype289 = 0;
        var _vtype290 = 0;
        _rtmp3292 = input.readMapBegin();
        _ktype289 = _rtmp3292.ktype;
        _vtype290 = _rtmp3292.vtype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var key294 = null;
          var val295 = null;
          key294 = input.readString();
          val295 = input.readString();
          this.success[key294] = val295;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_tableIdMap_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_tableIdMap_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter296 in this.success)
    {
      if (this.success.hasOwnProperty(kiter296))
      {
        var viter297 = this.success[kiter296];
        output.writeString(kiter296);
        output.writeString(viter297);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_testTableClassLoad_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.className = null;
  this.asTypeName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.className !== undefined) {
      this.className = args.className;
    }
    if (args.asTypeName !== undefined) {
      this.asTypeName = args.asTypeName;
    }
  }
};
AccumuloProxy_testTableClassLoad_args.prototype = {};
AccumuloProxy_testTableClassLoad_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.className = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.asTypeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_testTableClassLoad_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_testTableClassLoad_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.className !== null && this.className !== undefined) {
    output.writeFieldBegin('className', Thrift.Type.STRING, 3);
    output.writeString(this.className);
    output.writeFieldEnd();
  }
  if (this.asTypeName !== null && this.asTypeName !== undefined) {
    output.writeFieldBegin('asTypeName', Thrift.Type.STRING, 4);
    output.writeString(this.asTypeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_testTableClassLoad_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_testTableClassLoad_result.prototype = {};
AccumuloProxy_testTableClassLoad_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_testTableClassLoad_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_testTableClassLoad_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_pingTabletServer_args = function(args) {
  this.login = null;
  this.tserver = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tserver !== undefined) {
      this.tserver = args.tserver;
    }
  }
};
AccumuloProxy_pingTabletServer_args.prototype = {};
AccumuloProxy_pingTabletServer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tserver = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_pingTabletServer_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_pingTabletServer_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tserver !== null && this.tserver !== undefined) {
    output.writeFieldBegin('tserver', Thrift.Type.STRING, 2);
    output.writeString(this.tserver);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_pingTabletServer_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_pingTabletServer_result.prototype = {};
AccumuloProxy_pingTabletServer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_pingTabletServer_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_pingTabletServer_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getActiveScans_args = function(args) {
  this.login = null;
  this.tserver = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tserver !== undefined) {
      this.tserver = args.tserver;
    }
  }
};
AccumuloProxy_getActiveScans_args.prototype = {};
AccumuloProxy_getActiveScans_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tserver = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getActiveScans_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getActiveScans_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tserver !== null && this.tserver !== undefined) {
    output.writeFieldBegin('tserver', Thrift.Type.STRING, 2);
    output.writeString(this.tserver);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getActiveScans_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_getActiveScans_result.prototype = {};
AccumuloProxy_getActiveScans_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size298 = 0;
        var _rtmp3302;
        this.success = [];
        var _etype301 = 0;
        _rtmp3302 = input.readListBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = new ttypes.ActiveScan();
          elem304.read(input);
          this.success.push(elem304);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getActiveScans_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getActiveScans_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter305 in this.success)
    {
      if (this.success.hasOwnProperty(iter305))
      {
        iter305 = this.success[iter305];
        iter305.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getActiveCompactions_args = function(args) {
  this.login = null;
  this.tserver = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tserver !== undefined) {
      this.tserver = args.tserver;
    }
  }
};
AccumuloProxy_getActiveCompactions_args.prototype = {};
AccumuloProxy_getActiveCompactions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tserver = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getActiveCompactions_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getActiveCompactions_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tserver !== null && this.tserver !== undefined) {
    output.writeFieldBegin('tserver', Thrift.Type.STRING, 2);
    output.writeString(this.tserver);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getActiveCompactions_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_getActiveCompactions_result.prototype = {};
AccumuloProxy_getActiveCompactions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size306 = 0;
        var _rtmp3310;
        this.success = [];
        var _etype309 = 0;
        _rtmp3310 = input.readListBegin();
        _etype309 = _rtmp3310.etype;
        _size306 = _rtmp3310.size;
        for (var _i311 = 0; _i311 < _size306; ++_i311)
        {
          var elem312 = null;
          elem312 = new ttypes.ActiveCompaction();
          elem312.read(input);
          this.success.push(elem312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getActiveCompactions_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getActiveCompactions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter313 in this.success)
    {
      if (this.success.hasOwnProperty(iter313))
      {
        iter313 = this.success[iter313];
        iter313.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getSiteConfiguration_args = function(args) {
  this.login = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
  }
};
AccumuloProxy_getSiteConfiguration_args.prototype = {};
AccumuloProxy_getSiteConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getSiteConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getSiteConfiguration_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getSiteConfiguration_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_getSiteConfiguration_result.prototype = {};
AccumuloProxy_getSiteConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size314 = 0;
        var _rtmp3318;
        this.success = {};
        var _ktype315 = 0;
        var _vtype316 = 0;
        _rtmp3318 = input.readMapBegin();
        _ktype315 = _rtmp3318.ktype;
        _vtype316 = _rtmp3318.vtype;
        _size314 = _rtmp3318.size;
        for (var _i319 = 0; _i319 < _size314; ++_i319)
        {
          var key320 = null;
          var val321 = null;
          key320 = input.readString();
          val321 = input.readString();
          this.success[key320] = val321;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getSiteConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getSiteConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter322 in this.success)
    {
      if (this.success.hasOwnProperty(kiter322))
      {
        var viter323 = this.success[kiter322];
        output.writeString(kiter322);
        output.writeString(viter323);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getSystemConfiguration_args = function(args) {
  this.login = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
  }
};
AccumuloProxy_getSystemConfiguration_args.prototype = {};
AccumuloProxy_getSystemConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getSystemConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getSystemConfiguration_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getSystemConfiguration_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_getSystemConfiguration_result.prototype = {};
AccumuloProxy_getSystemConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size324 = 0;
        var _rtmp3328;
        this.success = {};
        var _ktype325 = 0;
        var _vtype326 = 0;
        _rtmp3328 = input.readMapBegin();
        _ktype325 = _rtmp3328.ktype;
        _vtype326 = _rtmp3328.vtype;
        _size324 = _rtmp3328.size;
        for (var _i329 = 0; _i329 < _size324; ++_i329)
        {
          var key330 = null;
          var val331 = null;
          key330 = input.readString();
          val331 = input.readString();
          this.success[key330] = val331;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getSystemConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getSystemConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter332 in this.success)
    {
      if (this.success.hasOwnProperty(kiter332))
      {
        var viter333 = this.success[kiter332];
        output.writeString(kiter332);
        output.writeString(viter333);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getTabletServers_args = function(args) {
  this.login = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
  }
};
AccumuloProxy_getTabletServers_args.prototype = {};
AccumuloProxy_getTabletServers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getTabletServers_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getTabletServers_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getTabletServers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AccumuloProxy_getTabletServers_result.prototype = {};
AccumuloProxy_getTabletServers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size334 = 0;
        var _rtmp3338;
        this.success = [];
        var _etype337 = 0;
        _rtmp3338 = input.readListBegin();
        _etype337 = _rtmp3338.etype;
        _size334 = _rtmp3338.size;
        for (var _i339 = 0; _i339 < _size334; ++_i339)
        {
          var elem340 = null;
          elem340 = input.readString();
          this.success.push(elem340);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getTabletServers_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getTabletServers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter341 in this.success)
    {
      if (this.success.hasOwnProperty(iter341))
      {
        iter341 = this.success[iter341];
        output.writeString(iter341);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_removeProperty_args = function(args) {
  this.login = null;
  this.property = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
  }
};
AccumuloProxy_removeProperty_args.prototype = {};
AccumuloProxy_removeProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_removeProperty_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_removeProperty_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 2);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_removeProperty_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_removeProperty_result.prototype = {};
AccumuloProxy_removeProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_removeProperty_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_removeProperty_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_setProperty_args = function(args) {
  this.login = null;
  this.property = null;
  this.value = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
AccumuloProxy_setProperty_args.prototype = {};
AccumuloProxy_setProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_setProperty_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_setProperty_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 2);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_setProperty_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_setProperty_result.prototype = {};
AccumuloProxy_setProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_setProperty_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_setProperty_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_testClassLoad_args = function(args) {
  this.login = null;
  this.className = null;
  this.asTypeName = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.className !== undefined) {
      this.className = args.className;
    }
    if (args.asTypeName !== undefined) {
      this.asTypeName = args.asTypeName;
    }
  }
};
AccumuloProxy_testClassLoad_args.prototype = {};
AccumuloProxy_testClassLoad_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.className = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.asTypeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_testClassLoad_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_testClassLoad_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.className !== null && this.className !== undefined) {
    output.writeFieldBegin('className', Thrift.Type.STRING, 2);
    output.writeString(this.className);
    output.writeFieldEnd();
  }
  if (this.asTypeName !== null && this.asTypeName !== undefined) {
    output.writeFieldBegin('asTypeName', Thrift.Type.STRING, 3);
    output.writeString(this.asTypeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_testClassLoad_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_testClassLoad_result.prototype = {};
AccumuloProxy_testClassLoad_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_testClassLoad_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_testClassLoad_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_authenticateUser_args = function(args) {
  this.login = null;
  this.user = null;
  this.properties = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
  }
};
AccumuloProxy_authenticateUser_args.prototype = {};
AccumuloProxy_authenticateUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size342 = 0;
        var _rtmp3346;
        this.properties = {};
        var _ktype343 = 0;
        var _vtype344 = 0;
        _rtmp3346 = input.readMapBegin();
        _ktype343 = _rtmp3346.ktype;
        _vtype344 = _rtmp3346.vtype;
        _size342 = _rtmp3346.size;
        for (var _i347 = 0; _i347 < _size342; ++_i347)
        {
          var key348 = null;
          var val349 = null;
          key348 = input.readString();
          val349 = input.readString();
          this.properties[key348] = val349;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_authenticateUser_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_authenticateUser_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter350 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter350))
      {
        var viter351 = this.properties[kiter350];
        output.writeString(kiter350);
        output.writeString(viter351);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_authenticateUser_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_authenticateUser_result.prototype = {};
AccumuloProxy_authenticateUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_authenticateUser_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_authenticateUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_changeUserAuthorizations_args = function(args) {
  this.login = null;
  this.user = null;
  this.authorizations = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
  }
};
AccumuloProxy_changeUserAuthorizations_args.prototype = {};
AccumuloProxy_changeUserAuthorizations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size352 = 0;
        var _rtmp3356;
        this.authorizations = [];
        var _etype355 = 0;
        _rtmp3356 = input.readSetBegin();
        _etype355 = _rtmp3356.etype;
        _size352 = _rtmp3356.size;
        for (var _i357 = 0; _i357 < _size352; ++_i357)
        {
          var elem358 = null;
          elem358 = input.readString();
          this.authorizations.push(elem358);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_changeUserAuthorizations_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_changeUserAuthorizations_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.authorizations !== null && this.authorizations !== undefined) {
    output.writeFieldBegin('authorizations', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.authorizations.length);
    for (var iter359 in this.authorizations)
    {
      if (this.authorizations.hasOwnProperty(iter359))
      {
        iter359 = this.authorizations[iter359];
        output.writeString(iter359);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_changeUserAuthorizations_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_changeUserAuthorizations_result.prototype = {};
AccumuloProxy_changeUserAuthorizations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_changeUserAuthorizations_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_changeUserAuthorizations_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_changeLocalUserPassword_args = function(args) {
  this.login = null;
  this.user = null;
  this.password = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
AccumuloProxy_changeLocalUserPassword_args.prototype = {};
AccumuloProxy_changeLocalUserPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_changeLocalUserPassword_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_changeLocalUserPassword_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_changeLocalUserPassword_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_changeLocalUserPassword_result.prototype = {};
AccumuloProxy_changeLocalUserPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_changeLocalUserPassword_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_changeLocalUserPassword_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createLocalUser_args = function(args) {
  this.login = null;
  this.user = null;
  this.password = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
AccumuloProxy_createLocalUser_args.prototype = {};
AccumuloProxy_createLocalUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createLocalUser_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createLocalUser_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createLocalUser_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_createLocalUser_result.prototype = {};
AccumuloProxy_createLocalUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createLocalUser_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createLocalUser_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_dropLocalUser_args = function(args) {
  this.login = null;
  this.user = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
AccumuloProxy_dropLocalUser_args.prototype = {};
AccumuloProxy_dropLocalUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_dropLocalUser_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_dropLocalUser_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_dropLocalUser_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_dropLocalUser_result.prototype = {};
AccumuloProxy_dropLocalUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_dropLocalUser_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_dropLocalUser_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getUserAuthorizations_args = function(args) {
  this.login = null;
  this.user = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
AccumuloProxy_getUserAuthorizations_args.prototype = {};
AccumuloProxy_getUserAuthorizations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getUserAuthorizations_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getUserAuthorizations_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getUserAuthorizations_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_getUserAuthorizations_result.prototype = {};
AccumuloProxy_getUserAuthorizations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size360 = 0;
        var _rtmp3364;
        this.success = [];
        var _etype363 = 0;
        _rtmp3364 = input.readListBegin();
        _etype363 = _rtmp3364.etype;
        _size360 = _rtmp3364.size;
        for (var _i365 = 0; _i365 < _size360; ++_i365)
        {
          var elem366 = null;
          elem366 = input.readString();
          this.success.push(elem366);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getUserAuthorizations_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getUserAuthorizations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter367 in this.success)
    {
      if (this.success.hasOwnProperty(iter367))
      {
        iter367 = this.success[iter367];
        output.writeString(iter367);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_grantSystemPermission_args = function(args) {
  this.login = null;
  this.user = null;
  this.perm = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.perm !== undefined) {
      this.perm = args.perm;
    }
  }
};
AccumuloProxy_grantSystemPermission_args.prototype = {};
AccumuloProxy_grantSystemPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.perm = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_grantSystemPermission_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_grantSystemPermission_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.perm !== null && this.perm !== undefined) {
    output.writeFieldBegin('perm', Thrift.Type.I32, 3);
    output.writeI32(this.perm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_grantSystemPermission_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_grantSystemPermission_result.prototype = {};
AccumuloProxy_grantSystemPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_grantSystemPermission_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_grantSystemPermission_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_grantTablePermission_args = function(args) {
  this.login = null;
  this.user = null;
  this.table = null;
  this.perm = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.perm !== undefined) {
      this.perm = args.perm;
    }
  }
};
AccumuloProxy_grantTablePermission_args.prototype = {};
AccumuloProxy_grantTablePermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.perm = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_grantTablePermission_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_grantTablePermission_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 3);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.perm !== null && this.perm !== undefined) {
    output.writeFieldBegin('perm', Thrift.Type.I32, 4);
    output.writeI32(this.perm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_grantTablePermission_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_grantTablePermission_result.prototype = {};
AccumuloProxy_grantTablePermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_grantTablePermission_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_grantTablePermission_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_hasSystemPermission_args = function(args) {
  this.login = null;
  this.user = null;
  this.perm = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.perm !== undefined) {
      this.perm = args.perm;
    }
  }
};
AccumuloProxy_hasSystemPermission_args.prototype = {};
AccumuloProxy_hasSystemPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.perm = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_hasSystemPermission_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_hasSystemPermission_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.perm !== null && this.perm !== undefined) {
    output.writeFieldBegin('perm', Thrift.Type.I32, 3);
    output.writeI32(this.perm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_hasSystemPermission_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_hasSystemPermission_result.prototype = {};
AccumuloProxy_hasSystemPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_hasSystemPermission_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_hasSystemPermission_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_hasTablePermission_args = function(args) {
  this.login = null;
  this.user = null;
  this.table = null;
  this.perm = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.perm !== undefined) {
      this.perm = args.perm;
    }
  }
};
AccumuloProxy_hasTablePermission_args.prototype = {};
AccumuloProxy_hasTablePermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.perm = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_hasTablePermission_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_hasTablePermission_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 3);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.perm !== null && this.perm !== undefined) {
    output.writeFieldBegin('perm', Thrift.Type.I32, 4);
    output.writeI32(this.perm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_hasTablePermission_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_hasTablePermission_result.prototype = {};
AccumuloProxy_hasTablePermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_hasTablePermission_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_hasTablePermission_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listLocalUsers_args = function(args) {
  this.login = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
  }
};
AccumuloProxy_listLocalUsers_args.prototype = {};
AccumuloProxy_listLocalUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listLocalUsers_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listLocalUsers_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_listLocalUsers_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_listLocalUsers_result.prototype = {};
AccumuloProxy_listLocalUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size368 = 0;
        var _rtmp3372;
        this.success = [];
        var _etype371 = 0;
        _rtmp3372 = input.readSetBegin();
        _etype371 = _rtmp3372.etype;
        _size368 = _rtmp3372.size;
        for (var _i373 = 0; _i373 < _size368; ++_i373)
        {
          var elem374 = null;
          elem374 = input.readString();
          this.success.push(elem374);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_listLocalUsers_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_listLocalUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter375 in this.success)
    {
      if (this.success.hasOwnProperty(iter375))
      {
        iter375 = this.success[iter375];
        output.writeString(iter375);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_revokeSystemPermission_args = function(args) {
  this.login = null;
  this.user = null;
  this.perm = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.perm !== undefined) {
      this.perm = args.perm;
    }
  }
};
AccumuloProxy_revokeSystemPermission_args.prototype = {};
AccumuloProxy_revokeSystemPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.perm = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_revokeSystemPermission_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_revokeSystemPermission_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.perm !== null && this.perm !== undefined) {
    output.writeFieldBegin('perm', Thrift.Type.I32, 3);
    output.writeI32(this.perm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_revokeSystemPermission_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_revokeSystemPermission_result.prototype = {};
AccumuloProxy_revokeSystemPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_revokeSystemPermission_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_revokeSystemPermission_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_revokeTablePermission_args = function(args) {
  this.login = null;
  this.user = null;
  this.table = null;
  this.perm = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.perm !== undefined) {
      this.perm = args.perm;
    }
  }
};
AccumuloProxy_revokeTablePermission_args.prototype = {};
AccumuloProxy_revokeTablePermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.perm = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_revokeTablePermission_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_revokeTablePermission_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 3);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.perm !== null && this.perm !== undefined) {
    output.writeFieldBegin('perm', Thrift.Type.I32, 4);
    output.writeI32(this.perm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_revokeTablePermission_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_revokeTablePermission_result.prototype = {};
AccumuloProxy_revokeTablePermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_revokeTablePermission_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_revokeTablePermission_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createBatchScanner_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.options = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
AccumuloProxy_createBatchScanner_args.prototype = {};
AccumuloProxy_createBatchScanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.BatchScanOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createBatchScanner_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createBatchScanner_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createBatchScanner_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_createBatchScanner_result.prototype = {};
AccumuloProxy_createBatchScanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createBatchScanner_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createBatchScanner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createScanner_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.options = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
AccumuloProxy_createScanner_args.prototype = {};
AccumuloProxy_createScanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.ScanOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createScanner_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createScanner_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createScanner_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_createScanner_result.prototype = {};
AccumuloProxy_createScanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.AccumuloException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createScanner_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createScanner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_hasNext_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined) {
      this.scanner = args.scanner;
    }
  }
};
AccumuloProxy_hasNext_args.prototype = {};
AccumuloProxy_hasNext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.scanner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_hasNext_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_hasNext_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.STRING, 1);
    output.writeString(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_hasNext_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  if (args instanceof ttypes.UnknownScanner) {
    this.ouch1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
  }
};
AccumuloProxy_hasNext_result.prototype = {};
AccumuloProxy_hasNext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.UnknownScanner();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_hasNext_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_hasNext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_nextEntry_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined) {
      this.scanner = args.scanner;
    }
  }
};
AccumuloProxy_nextEntry_args.prototype = {};
AccumuloProxy_nextEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.scanner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_nextEntry_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_nextEntry_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.STRING, 1);
    output.writeString(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_nextEntry_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.NoMoreEntriesException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.UnknownScanner) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_nextEntry_result.prototype = {};
AccumuloProxy_nextEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.KeyValueAndPeek();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.NoMoreEntriesException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.UnknownScanner();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.AccumuloSecurityException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_nextEntry_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_nextEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_nextK_args = function(args) {
  this.scanner = null;
  this.k = null;
  if (args) {
    if (args.scanner !== undefined) {
      this.scanner = args.scanner;
    }
    if (args.k !== undefined) {
      this.k = args.k;
    }
  }
};
AccumuloProxy_nextK_args.prototype = {};
AccumuloProxy_nextK_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.scanner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.k = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_nextK_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_nextK_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.STRING, 1);
    output.writeString(this.scanner);
    output.writeFieldEnd();
  }
  if (this.k !== null && this.k !== undefined) {
    output.writeFieldBegin('k', Thrift.Type.I32, 2);
    output.writeI32(this.k);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_nextK_result = function(args) {
  this.success = null;
  this.ouch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.NoMoreEntriesException) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.UnknownScanner) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_nextK_result.prototype = {};
AccumuloProxy_nextK_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScanResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.NoMoreEntriesException();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.UnknownScanner();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.AccumuloSecurityException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_nextK_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_nextK_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_closeScanner_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined) {
      this.scanner = args.scanner;
    }
  }
};
AccumuloProxy_closeScanner_args.prototype = {};
AccumuloProxy_closeScanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.scanner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_closeScanner_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_closeScanner_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.STRING, 1);
    output.writeString(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_closeScanner_result = function(args) {
  this.ouch1 = null;
  if (args instanceof ttypes.UnknownScanner) {
    this.ouch1 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
  }
};
AccumuloProxy_closeScanner_result.prototype = {};
AccumuloProxy_closeScanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.UnknownScanner();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_closeScanner_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_closeScanner_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_updateAndFlush_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.cells = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.cells !== undefined) {
      this.cells = args.cells;
    }
  }
};
AccumuloProxy_updateAndFlush_args.prototype = {};
AccumuloProxy_updateAndFlush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size376 = 0;
        var _rtmp3380;
        this.cells = {};
        var _ktype377 = 0;
        var _vtype378 = 0;
        _rtmp3380 = input.readMapBegin();
        _ktype377 = _rtmp3380.ktype;
        _vtype378 = _rtmp3380.vtype;
        _size376 = _rtmp3380.size;
        for (var _i381 = 0; _i381 < _size376; ++_i381)
        {
          var key382 = null;
          var val383 = null;
          key382 = input.readString();
          var _size384 = 0;
          var _rtmp3388;
          val383 = [];
          var _etype387 = 0;
          _rtmp3388 = input.readListBegin();
          _etype387 = _rtmp3388.etype;
          _size384 = _rtmp3388.size;
          for (var _i389 = 0; _i389 < _size384; ++_i389)
          {
            var elem390 = null;
            elem390 = new ttypes.ColumnUpdate();
            elem390.read(input);
            val383.push(elem390);
          }
          input.readListEnd();
          this.cells[key382] = val383;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_updateAndFlush_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_updateAndFlush_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.cells));
    for (var kiter391 in this.cells)
    {
      if (this.cells.hasOwnProperty(kiter391))
      {
        var viter392 = this.cells[kiter391];
        output.writeString(kiter391);
        output.writeListBegin(Thrift.Type.STRUCT, viter392.length);
        for (var iter393 in viter392)
        {
          if (viter392.hasOwnProperty(iter393))
          {
            iter393 = viter392[iter393];
            iter393.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_updateAndFlush_result = function(args) {
  this.outch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  this.ouch4 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.outch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args instanceof ttypes.MutationsRejectedException) {
    this.ouch4 = args;
    return;
  }
  if (args) {
    if (args.outch1 !== undefined) {
      this.outch1 = args.outch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
    if (args.ouch4 !== undefined) {
      this.ouch4 = args.ouch4;
    }
  }
};
AccumuloProxy_updateAndFlush_result.prototype = {};
AccumuloProxy_updateAndFlush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.outch1 = new ttypes.AccumuloException();
        this.outch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch4 = new ttypes.MutationsRejectedException();
        this.ouch4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_updateAndFlush_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_updateAndFlush_result');
  if (this.outch1 !== null && this.outch1 !== undefined) {
    output.writeFieldBegin('outch1', Thrift.Type.STRUCT, 1);
    this.outch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch4 !== null && this.ouch4 !== undefined) {
    output.writeFieldBegin('ouch4', Thrift.Type.STRUCT, 4);
    this.ouch4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createWriter_args = function(args) {
  this.login = null;
  this.tableName = null;
  this.opts = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.opts !== undefined) {
      this.opts = args.opts;
    }
  }
};
AccumuloProxy_createWriter_args.prototype = {};
AccumuloProxy_createWriter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.opts = new ttypes.WriterOptions();
        this.opts.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createWriter_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createWriter_args');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.opts !== null && this.opts !== undefined) {
    output.writeFieldBegin('opts', Thrift.Type.STRUCT, 3);
    this.opts.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_createWriter_result = function(args) {
  this.success = null;
  this.outch1 = null;
  this.ouch2 = null;
  this.ouch3 = null;
  if (args instanceof ttypes.AccumuloException) {
    this.outch1 = args;
    return;
  }
  if (args instanceof ttypes.AccumuloSecurityException) {
    this.ouch2 = args;
    return;
  }
  if (args instanceof ttypes.TableNotFoundException) {
    this.ouch3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.outch1 !== undefined) {
      this.outch1 = args.outch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
    if (args.ouch3 !== undefined) {
      this.ouch3 = args.ouch3;
    }
  }
};
AccumuloProxy_createWriter_result.prototype = {};
AccumuloProxy_createWriter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.outch1 = new ttypes.AccumuloException();
        this.outch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.AccumuloSecurityException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch3 = new ttypes.TableNotFoundException();
        this.ouch3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_createWriter_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_createWriter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.outch1 !== null && this.outch1 !== undefined) {
    output.writeFieldBegin('outch1', Thrift.Type.STRUCT, 1);
    this.outch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch3 !== null && this.ouch3 !== undefined) {
    output.writeFieldBegin('ouch3', Thrift.Type.STRUCT, 3);
    this.ouch3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_update_args = function(args) {
  this.writer = null;
  this.cells = null;
  if (args) {
    if (args.writer !== undefined) {
      this.writer = args.writer;
    }
    if (args.cells !== undefined) {
      this.cells = args.cells;
    }
  }
};
AccumuloProxy_update_args.prototype = {};
AccumuloProxy_update_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.writer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size394 = 0;
        var _rtmp3398;
        this.cells = {};
        var _ktype395 = 0;
        var _vtype396 = 0;
        _rtmp3398 = input.readMapBegin();
        _ktype395 = _rtmp3398.ktype;
        _vtype396 = _rtmp3398.vtype;
        _size394 = _rtmp3398.size;
        for (var _i399 = 0; _i399 < _size394; ++_i399)
        {
          var key400 = null;
          var val401 = null;
          key400 = input.readString();
          var _size402 = 0;
          var _rtmp3406;
          val401 = [];
          var _etype405 = 0;
          _rtmp3406 = input.readListBegin();
          _etype405 = _rtmp3406.etype;
          _size402 = _rtmp3406.size;
          for (var _i407 = 0; _i407 < _size402; ++_i407)
          {
            var elem408 = null;
            elem408 = new ttypes.ColumnUpdate();
            elem408.read(input);
            val401.push(elem408);
          }
          input.readListEnd();
          this.cells[key400] = val401;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_update_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_update_args');
  if (this.writer !== null && this.writer !== undefined) {
    output.writeFieldBegin('writer', Thrift.Type.STRING, 1);
    output.writeString(this.writer);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.cells));
    for (var kiter409 in this.cells)
    {
      if (this.cells.hasOwnProperty(kiter409))
      {
        var viter410 = this.cells[kiter409];
        output.writeString(kiter409);
        output.writeListBegin(Thrift.Type.STRUCT, viter410.length);
        for (var iter411 in viter410)
        {
          if (viter410.hasOwnProperty(iter411))
          {
            iter411 = viter410[iter411];
            iter411.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_update_result = function(args) {
};
AccumuloProxy_update_result.prototype = {};
AccumuloProxy_update_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_update_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_update_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_flush_args = function(args) {
  this.writer = null;
  if (args) {
    if (args.writer !== undefined) {
      this.writer = args.writer;
    }
  }
};
AccumuloProxy_flush_args.prototype = {};
AccumuloProxy_flush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.writer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_flush_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_flush_args');
  if (this.writer !== null && this.writer !== undefined) {
    output.writeFieldBegin('writer', Thrift.Type.STRING, 1);
    output.writeString(this.writer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_flush_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.UnknownWriter) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.MutationsRejectedException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_flush_result.prototype = {};
AccumuloProxy_flush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.UnknownWriter();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.MutationsRejectedException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_flush_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_flush_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_closeWriter_args = function(args) {
  this.writer = null;
  if (args) {
    if (args.writer !== undefined) {
      this.writer = args.writer;
    }
  }
};
AccumuloProxy_closeWriter_args.prototype = {};
AccumuloProxy_closeWriter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.writer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_closeWriter_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_closeWriter_args');
  if (this.writer !== null && this.writer !== undefined) {
    output.writeFieldBegin('writer', Thrift.Type.STRING, 1);
    output.writeString(this.writer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_closeWriter_result = function(args) {
  this.ouch1 = null;
  this.ouch2 = null;
  if (args instanceof ttypes.UnknownWriter) {
    this.ouch1 = args;
    return;
  }
  if (args instanceof ttypes.MutationsRejectedException) {
    this.ouch2 = args;
    return;
  }
  if (args) {
    if (args.ouch1 !== undefined) {
      this.ouch1 = args.ouch1;
    }
    if (args.ouch2 !== undefined) {
      this.ouch2 = args.ouch2;
    }
  }
};
AccumuloProxy_closeWriter_result.prototype = {};
AccumuloProxy_closeWriter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch1 = new ttypes.UnknownWriter();
        this.ouch1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch2 = new ttypes.MutationsRejectedException();
        this.ouch2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_closeWriter_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_closeWriter_result');
  if (this.ouch1 !== null && this.ouch1 !== undefined) {
    output.writeFieldBegin('ouch1', Thrift.Type.STRUCT, 1);
    this.ouch1.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch2 !== null && this.ouch2 !== undefined) {
    output.writeFieldBegin('ouch2', Thrift.Type.STRUCT, 2);
    this.ouch2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getRowRange_args = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined) {
      this.row = args.row;
    }
  }
};
AccumuloProxy_getRowRange_args.prototype = {};
AccumuloProxy_getRowRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getRowRange_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getRowRange_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getRowRange_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AccumuloProxy_getRowRange_result.prototype = {};
AccumuloProxy_getRowRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Range();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getRowRange_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getRowRange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getFollowing_args = function(args) {
  this.key = null;
  this.part = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.part !== undefined) {
      this.part = args.part;
    }
  }
};
AccumuloProxy_getFollowing_args.prototype = {};
AccumuloProxy_getFollowing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.Key();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.part = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getFollowing_args.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getFollowing_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.part !== null && this.part !== undefined) {
    output.writeFieldBegin('part', Thrift.Type.I32, 2);
    output.writeI32(this.part);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxy_getFollowing_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AccumuloProxy_getFollowing_result.prototype = {};
AccumuloProxy_getFollowing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Key();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloProxy_getFollowing_result.prototype.write = function(output) {
  output.writeStructBegin('AccumuloProxy_getFollowing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloProxyClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
AccumuloProxyClient.prototype = {};
AccumuloProxyClient.prototype.login = function(principal, loginProperties, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_login(principal, loginProperties);
};

AccumuloProxyClient.prototype.send_login = function(principal, loginProperties) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_login_args();
  args.principal = principal;
  args.loginProperties = loginProperties;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('login failed: unknown result');
};
AccumuloProxyClient.prototype.addConstraint = function(login, tableName, constraintClassName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addConstraint(login, tableName, constraintClassName);
};

AccumuloProxyClient.prototype.send_addConstraint = function(login, tableName, constraintClassName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addConstraint', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_addConstraint_args();
  args.login = login;
  args.tableName = tableName;
  args.constraintClassName = constraintClassName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_addConstraint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_addConstraint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addConstraint failed: unknown result');
};
AccumuloProxyClient.prototype.addSplits = function(login, tableName, splits, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addSplits(login, tableName, splits);
};

AccumuloProxyClient.prototype.send_addSplits = function(login, tableName, splits) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addSplits', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_addSplits_args();
  args.login = login;
  args.tableName = tableName;
  args.splits = splits;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_addSplits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_addSplits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.attachIterator = function(login, tableName, setting, scopes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_attachIterator(login, tableName, setting, scopes);
};

AccumuloProxyClient.prototype.send_attachIterator = function(login, tableName, setting, scopes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('attachIterator', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_attachIterator_args();
  args.login = login;
  args.tableName = tableName;
  args.setting = setting;
  args.scopes = scopes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_attachIterator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_attachIterator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.checkIteratorConflicts = function(login, tableName, setting, scopes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_checkIteratorConflicts(login, tableName, setting, scopes);
};

AccumuloProxyClient.prototype.send_checkIteratorConflicts = function(login, tableName, setting, scopes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkIteratorConflicts', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_checkIteratorConflicts_args();
  args.login = login;
  args.tableName = tableName;
  args.setting = setting;
  args.scopes = scopes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_checkIteratorConflicts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_checkIteratorConflicts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.clearLocatorCache = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_clearLocatorCache(login, tableName);
};

AccumuloProxyClient.prototype.send_clearLocatorCache = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clearLocatorCache', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_clearLocatorCache_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_clearLocatorCache = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_clearLocatorCache_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  callback(null)
};
AccumuloProxyClient.prototype.cloneTable = function(login, tableName, newTableName, flush, propertiesToSet, propertiesToExclude, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_cloneTable(login, tableName, newTableName, flush, propertiesToSet, propertiesToExclude);
};

AccumuloProxyClient.prototype.send_cloneTable = function(login, tableName, newTableName, flush, propertiesToSet, propertiesToExclude) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cloneTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_cloneTable_args();
  args.login = login;
  args.tableName = tableName;
  args.newTableName = newTableName;
  args.flush = flush;
  args.propertiesToSet = propertiesToSet;
  args.propertiesToExclude = propertiesToExclude;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_cloneTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_cloneTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.ouch4) {
    return callback(result.ouch4);
  }
  callback(null)
};
AccumuloProxyClient.prototype.compactTable = function(login, tableName, startRow, endRow, iterators, flush, wait, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_compactTable(login, tableName, startRow, endRow, iterators, flush, wait);
};

AccumuloProxyClient.prototype.send_compactTable = function(login, tableName, startRow, endRow, iterators, flush, wait) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compactTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_compactTable_args();
  args.login = login;
  args.tableName = tableName;
  args.startRow = startRow;
  args.endRow = endRow;
  args.iterators = iterators;
  args.flush = flush;
  args.wait = wait;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_compactTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_compactTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.cancelCompaction = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_cancelCompaction(login, tableName);
};

AccumuloProxyClient.prototype.send_cancelCompaction = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelCompaction', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_cancelCompaction_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_cancelCompaction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_cancelCompaction_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.createTable = function(login, tableName, versioningIter, type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createTable(login, tableName, versioningIter, type);
};

AccumuloProxyClient.prototype.send_createTable = function(login, tableName, versioningIter, type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_createTable_args();
  args.login = login;
  args.tableName = tableName;
  args.versioningIter = versioningIter;
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_createTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_createTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.deleteTable = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteTable(login, tableName);
};

AccumuloProxyClient.prototype.send_deleteTable = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_deleteTable_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_deleteTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_deleteTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.deleteRows = function(login, tableName, startRow, endRow, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteRows(login, tableName, startRow, endRow);
};

AccumuloProxyClient.prototype.send_deleteRows = function(login, tableName, startRow, endRow) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteRows', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_deleteRows_args();
  args.login = login;
  args.tableName = tableName;
  args.startRow = startRow;
  args.endRow = endRow;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_deleteRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_deleteRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.exportTable = function(login, tableName, exportDir, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_exportTable(login, tableName, exportDir);
};

AccumuloProxyClient.prototype.send_exportTable = function(login, tableName, exportDir) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exportTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_exportTable_args();
  args.login = login;
  args.tableName = tableName;
  args.exportDir = exportDir;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_exportTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_exportTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.flushTable = function(login, tableName, startRow, endRow, wait, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_flushTable(login, tableName, startRow, endRow, wait);
};

AccumuloProxyClient.prototype.send_flushTable = function(login, tableName, startRow, endRow, wait) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('flushTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_flushTable_args();
  args.login = login;
  args.tableName = tableName;
  args.startRow = startRow;
  args.endRow = endRow;
  args.wait = wait;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_flushTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_flushTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.getLocalityGroups = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getLocalityGroups(login, tableName);
};

AccumuloProxyClient.prototype.send_getLocalityGroups = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLocalityGroups', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getLocalityGroups_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getLocalityGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getLocalityGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLocalityGroups failed: unknown result');
};
AccumuloProxyClient.prototype.getIteratorSetting = function(login, tableName, iteratorName, scope, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getIteratorSetting(login, tableName, iteratorName, scope);
};

AccumuloProxyClient.prototype.send_getIteratorSetting = function(login, tableName, iteratorName, scope) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getIteratorSetting', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getIteratorSetting_args();
  args.login = login;
  args.tableName = tableName;
  args.iteratorName = iteratorName;
  args.scope = scope;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getIteratorSetting = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getIteratorSetting_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getIteratorSetting failed: unknown result');
};
AccumuloProxyClient.prototype.getMaxRow = function(login, tableName, auths, startRow, startInclusive, endRow, endInclusive, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getMaxRow(login, tableName, auths, startRow, startInclusive, endRow, endInclusive);
};

AccumuloProxyClient.prototype.send_getMaxRow = function(login, tableName, auths, startRow, startInclusive, endRow, endInclusive) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMaxRow', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getMaxRow_args();
  args.login = login;
  args.tableName = tableName;
  args.auths = auths;
  args.startRow = startRow;
  args.startInclusive = startInclusive;
  args.endRow = endRow;
  args.endInclusive = endInclusive;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getMaxRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getMaxRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMaxRow failed: unknown result');
};
AccumuloProxyClient.prototype.getTableProperties = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTableProperties(login, tableName);
};

AccumuloProxyClient.prototype.send_getTableProperties = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableProperties', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getTableProperties_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getTableProperties = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getTableProperties_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableProperties failed: unknown result');
};
AccumuloProxyClient.prototype.importDirectory = function(login, tableName, importDir, failureDir, setTime, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_importDirectory(login, tableName, importDir, failureDir, setTime);
};

AccumuloProxyClient.prototype.send_importDirectory = function(login, tableName, importDir, failureDir, setTime) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('importDirectory', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_importDirectory_args();
  args.login = login;
  args.tableName = tableName;
  args.importDir = importDir;
  args.failureDir = failureDir;
  args.setTime = setTime;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_importDirectory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_importDirectory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.ouch4) {
    return callback(result.ouch4);
  }
  callback(null)
};
AccumuloProxyClient.prototype.importTable = function(login, tableName, importDir, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_importTable(login, tableName, importDir);
};

AccumuloProxyClient.prototype.send_importTable = function(login, tableName, importDir) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('importTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_importTable_args();
  args.login = login;
  args.tableName = tableName;
  args.importDir = importDir;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_importTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_importTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.listSplits = function(login, tableName, maxSplits, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_listSplits(login, tableName, maxSplits);
};

AccumuloProxyClient.prototype.send_listSplits = function(login, tableName, maxSplits) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listSplits', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_listSplits_args();
  args.login = login;
  args.tableName = tableName;
  args.maxSplits = maxSplits;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_listSplits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_listSplits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listSplits failed: unknown result');
};
AccumuloProxyClient.prototype.listTables = function(login, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_listTables(login);
};

AccumuloProxyClient.prototype.send_listTables = function(login) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listTables', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_listTables_args();
  args.login = login;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_listTables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_listTables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listTables failed: unknown result');
};
AccumuloProxyClient.prototype.listIterators = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_listIterators(login, tableName);
};

AccumuloProxyClient.prototype.send_listIterators = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listIterators', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_listIterators_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_listIterators = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_listIterators_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listIterators failed: unknown result');
};
AccumuloProxyClient.prototype.listConstraints = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_listConstraints(login, tableName);
};

AccumuloProxyClient.prototype.send_listConstraints = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listConstraints', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_listConstraints_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_listConstraints = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_listConstraints_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listConstraints failed: unknown result');
};
AccumuloProxyClient.prototype.mergeTablets = function(login, tableName, startRow, endRow, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mergeTablets(login, tableName, startRow, endRow);
};

AccumuloProxyClient.prototype.send_mergeTablets = function(login, tableName, startRow, endRow) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mergeTablets', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_mergeTablets_args();
  args.login = login;
  args.tableName = tableName;
  args.startRow = startRow;
  args.endRow = endRow;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_mergeTablets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_mergeTablets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.offlineTable = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_offlineTable(login, tableName);
};

AccumuloProxyClient.prototype.send_offlineTable = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('offlineTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_offlineTable_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_offlineTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_offlineTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.onlineTable = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_onlineTable(login, tableName);
};

AccumuloProxyClient.prototype.send_onlineTable = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('onlineTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_onlineTable_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_onlineTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_onlineTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.removeConstraint = function(login, tableName, constraint, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_removeConstraint(login, tableName, constraint);
};

AccumuloProxyClient.prototype.send_removeConstraint = function(login, tableName, constraint) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeConstraint', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_removeConstraint_args();
  args.login = login;
  args.tableName = tableName;
  args.constraint = constraint;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_removeConstraint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_removeConstraint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.removeIterator = function(login, tableName, iterName, scopes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_removeIterator(login, tableName, iterName, scopes);
};

AccumuloProxyClient.prototype.send_removeIterator = function(login, tableName, iterName, scopes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeIterator', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_removeIterator_args();
  args.login = login;
  args.tableName = tableName;
  args.iterName = iterName;
  args.scopes = scopes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_removeIterator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_removeIterator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.removeTableProperty = function(login, tableName, property, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_removeTableProperty(login, tableName, property);
};

AccumuloProxyClient.prototype.send_removeTableProperty = function(login, tableName, property) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeTableProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_removeTableProperty_args();
  args.login = login;
  args.tableName = tableName;
  args.property = property;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_removeTableProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_removeTableProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.renameTable = function(login, oldTableName, newTableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_renameTable(login, oldTableName, newTableName);
};

AccumuloProxyClient.prototype.send_renameTable = function(login, oldTableName, newTableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('renameTable', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_renameTable_args();
  args.login = login;
  args.oldTableName = oldTableName;
  args.newTableName = newTableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_renameTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_renameTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.ouch4) {
    return callback(result.ouch4);
  }
  callback(null)
};
AccumuloProxyClient.prototype.setLocalityGroups = function(login, tableName, groups, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setLocalityGroups(login, tableName, groups);
};

AccumuloProxyClient.prototype.send_setLocalityGroups = function(login, tableName, groups) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setLocalityGroups', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_setLocalityGroups_args();
  args.login = login;
  args.tableName = tableName;
  args.groups = groups;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_setLocalityGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_setLocalityGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.setTableProperty = function(login, tableName, property, value, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setTableProperty(login, tableName, property, value);
};

AccumuloProxyClient.prototype.send_setTableProperty = function(login, tableName, property, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setTableProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_setTableProperty_args();
  args.login = login;
  args.tableName = tableName;
  args.property = property;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_setTableProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_setTableProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.splitRangeByTablets = function(login, tableName, range, maxSplits, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_splitRangeByTablets(login, tableName, range, maxSplits);
};

AccumuloProxyClient.prototype.send_splitRangeByTablets = function(login, tableName, range, maxSplits) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('splitRangeByTablets', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_splitRangeByTablets_args();
  args.login = login;
  args.tableName = tableName;
  args.range = range;
  args.maxSplits = maxSplits;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_splitRangeByTablets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_splitRangeByTablets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('splitRangeByTablets failed: unknown result');
};
AccumuloProxyClient.prototype.tableExists = function(login, tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_tableExists(login, tableName);
};

AccumuloProxyClient.prototype.send_tableExists = function(login, tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('tableExists', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_tableExists_args();
  args.login = login;
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_tableExists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_tableExists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('tableExists failed: unknown result');
};
AccumuloProxyClient.prototype.tableIdMap = function(login, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_tableIdMap(login);
};

AccumuloProxyClient.prototype.send_tableIdMap = function(login) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('tableIdMap', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_tableIdMap_args();
  args.login = login;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_tableIdMap = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_tableIdMap_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('tableIdMap failed: unknown result');
};
AccumuloProxyClient.prototype.testTableClassLoad = function(login, tableName, className, asTypeName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_testTableClassLoad(login, tableName, className, asTypeName);
};

AccumuloProxyClient.prototype.send_testTableClassLoad = function(login, tableName, className, asTypeName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('testTableClassLoad', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_testTableClassLoad_args();
  args.login = login;
  args.tableName = tableName;
  args.className = className;
  args.asTypeName = asTypeName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_testTableClassLoad = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_testTableClassLoad_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testTableClassLoad failed: unknown result');
};
AccumuloProxyClient.prototype.pingTabletServer = function(login, tserver, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_pingTabletServer(login, tserver);
};

AccumuloProxyClient.prototype.send_pingTabletServer = function(login, tserver) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('pingTabletServer', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_pingTabletServer_args();
  args.login = login;
  args.tserver = tserver;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_pingTabletServer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_pingTabletServer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.getActiveScans = function(login, tserver, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getActiveScans(login, tserver);
};

AccumuloProxyClient.prototype.send_getActiveScans = function(login, tserver) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActiveScans', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getActiveScans_args();
  args.login = login;
  args.tserver = tserver;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getActiveScans = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getActiveScans_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActiveScans failed: unknown result');
};
AccumuloProxyClient.prototype.getActiveCompactions = function(login, tserver, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getActiveCompactions(login, tserver);
};

AccumuloProxyClient.prototype.send_getActiveCompactions = function(login, tserver) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActiveCompactions', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getActiveCompactions_args();
  args.login = login;
  args.tserver = tserver;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getActiveCompactions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getActiveCompactions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActiveCompactions failed: unknown result');
};
AccumuloProxyClient.prototype.getSiteConfiguration = function(login, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getSiteConfiguration(login);
};

AccumuloProxyClient.prototype.send_getSiteConfiguration = function(login) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSiteConfiguration', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getSiteConfiguration_args();
  args.login = login;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getSiteConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getSiteConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSiteConfiguration failed: unknown result');
};
AccumuloProxyClient.prototype.getSystemConfiguration = function(login, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getSystemConfiguration(login);
};

AccumuloProxyClient.prototype.send_getSystemConfiguration = function(login) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSystemConfiguration', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getSystemConfiguration_args();
  args.login = login;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getSystemConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getSystemConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSystemConfiguration failed: unknown result');
};
AccumuloProxyClient.prototype.getTabletServers = function(login, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTabletServers(login);
};

AccumuloProxyClient.prototype.send_getTabletServers = function(login) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTabletServers', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getTabletServers_args();
  args.login = login;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getTabletServers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getTabletServers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTabletServers failed: unknown result');
};
AccumuloProxyClient.prototype.removeProperty = function(login, property, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_removeProperty(login, property);
};

AccumuloProxyClient.prototype.send_removeProperty = function(login, property) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_removeProperty_args();
  args.login = login;
  args.property = property;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_removeProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_removeProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.setProperty = function(login, property, value, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setProperty(login, property, value);
};

AccumuloProxyClient.prototype.send_setProperty = function(login, property, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_setProperty_args();
  args.login = login;
  args.property = property;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_setProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_setProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.testClassLoad = function(login, className, asTypeName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_testClassLoad(login, className, asTypeName);
};

AccumuloProxyClient.prototype.send_testClassLoad = function(login, className, asTypeName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('testClassLoad', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_testClassLoad_args();
  args.login = login;
  args.className = className;
  args.asTypeName = asTypeName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_testClassLoad = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_testClassLoad_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testClassLoad failed: unknown result');
};
AccumuloProxyClient.prototype.authenticateUser = function(login, user, properties, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_authenticateUser(login, user, properties);
};

AccumuloProxyClient.prototype.send_authenticateUser = function(login, user, properties) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticateUser', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_authenticateUser_args();
  args.login = login;
  args.user = user;
  args.properties = properties;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_authenticateUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_authenticateUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticateUser failed: unknown result');
};
AccumuloProxyClient.prototype.changeUserAuthorizations = function(login, user, authorizations, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_changeUserAuthorizations(login, user, authorizations);
};

AccumuloProxyClient.prototype.send_changeUserAuthorizations = function(login, user, authorizations) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeUserAuthorizations', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_changeUserAuthorizations_args();
  args.login = login;
  args.user = user;
  args.authorizations = authorizations;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_changeUserAuthorizations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_changeUserAuthorizations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.changeLocalUserPassword = function(login, user, password, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_changeLocalUserPassword(login, user, password);
};

AccumuloProxyClient.prototype.send_changeLocalUserPassword = function(login, user, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeLocalUserPassword', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_changeLocalUserPassword_args();
  args.login = login;
  args.user = user;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_changeLocalUserPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_changeLocalUserPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.createLocalUser = function(login, user, password, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createLocalUser(login, user, password);
};

AccumuloProxyClient.prototype.send_createLocalUser = function(login, user, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createLocalUser', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_createLocalUser_args();
  args.login = login;
  args.user = user;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_createLocalUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_createLocalUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.dropLocalUser = function(login, user, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_dropLocalUser(login, user);
};

AccumuloProxyClient.prototype.send_dropLocalUser = function(login, user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('dropLocalUser', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_dropLocalUser_args();
  args.login = login;
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_dropLocalUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_dropLocalUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.getUserAuthorizations = function(login, user, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getUserAuthorizations(login, user);
};

AccumuloProxyClient.prototype.send_getUserAuthorizations = function(login, user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserAuthorizations', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getUserAuthorizations_args();
  args.login = login;
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getUserAuthorizations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getUserAuthorizations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserAuthorizations failed: unknown result');
};
AccumuloProxyClient.prototype.grantSystemPermission = function(login, user, perm, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_grantSystemPermission(login, user, perm);
};

AccumuloProxyClient.prototype.send_grantSystemPermission = function(login, user, perm) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grantSystemPermission', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_grantSystemPermission_args();
  args.login = login;
  args.user = user;
  args.perm = perm;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_grantSystemPermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_grantSystemPermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.grantTablePermission = function(login, user, table, perm, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_grantTablePermission(login, user, table, perm);
};

AccumuloProxyClient.prototype.send_grantTablePermission = function(login, user, table, perm) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grantTablePermission', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_grantTablePermission_args();
  args.login = login;
  args.user = user;
  args.table = table;
  args.perm = perm;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_grantTablePermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_grantTablePermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.hasSystemPermission = function(login, user, perm, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_hasSystemPermission(login, user, perm);
};

AccumuloProxyClient.prototype.send_hasSystemPermission = function(login, user, perm) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hasSystemPermission', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_hasSystemPermission_args();
  args.login = login;
  args.user = user;
  args.perm = perm;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_hasSystemPermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_hasSystemPermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasSystemPermission failed: unknown result');
};
AccumuloProxyClient.prototype.hasTablePermission = function(login, user, table, perm, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_hasTablePermission(login, user, table, perm);
};

AccumuloProxyClient.prototype.send_hasTablePermission = function(login, user, table, perm) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hasTablePermission', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_hasTablePermission_args();
  args.login = login;
  args.user = user;
  args.table = table;
  args.perm = perm;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_hasTablePermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_hasTablePermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasTablePermission failed: unknown result');
};
AccumuloProxyClient.prototype.listLocalUsers = function(login, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_listLocalUsers(login);
};

AccumuloProxyClient.prototype.send_listLocalUsers = function(login) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listLocalUsers', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_listLocalUsers_args();
  args.login = login;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_listLocalUsers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_listLocalUsers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listLocalUsers failed: unknown result');
};
AccumuloProxyClient.prototype.revokeSystemPermission = function(login, user, perm, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_revokeSystemPermission(login, user, perm);
};

AccumuloProxyClient.prototype.send_revokeSystemPermission = function(login, user, perm) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revokeSystemPermission', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_revokeSystemPermission_args();
  args.login = login;
  args.user = user;
  args.perm = perm;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_revokeSystemPermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_revokeSystemPermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.revokeTablePermission = function(login, user, table, perm, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_revokeTablePermission(login, user, table, perm);
};

AccumuloProxyClient.prototype.send_revokeTablePermission = function(login, user, table, perm) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revokeTablePermission', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_revokeTablePermission_args();
  args.login = login;
  args.user = user;
  args.table = table;
  args.perm = perm;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_revokeTablePermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_revokeTablePermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  callback(null)
};
AccumuloProxyClient.prototype.createBatchScanner = function(login, tableName, options, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createBatchScanner(login, tableName, options);
};

AccumuloProxyClient.prototype.send_createBatchScanner = function(login, tableName, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createBatchScanner', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_createBatchScanner_args();
  args.login = login;
  args.tableName = tableName;
  args.options = options;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_createBatchScanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_createBatchScanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createBatchScanner failed: unknown result');
};
AccumuloProxyClient.prototype.createScanner = function(login, tableName, options, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createScanner(login, tableName, options);
};

AccumuloProxyClient.prototype.send_createScanner = function(login, tableName, options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createScanner', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_createScanner_args();
  args.login = login;
  args.tableName = tableName;
  args.options = options;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_createScanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_createScanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createScanner failed: unknown result');
};
AccumuloProxyClient.prototype.hasNext = function(scanner, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_hasNext(scanner);
};

AccumuloProxyClient.prototype.send_hasNext = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hasNext', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_hasNext_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_hasNext = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_hasNext_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasNext failed: unknown result');
};
AccumuloProxyClient.prototype.nextEntry = function(scanner, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_nextEntry(scanner);
};

AccumuloProxyClient.prototype.send_nextEntry = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('nextEntry', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_nextEntry_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_nextEntry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_nextEntry_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('nextEntry failed: unknown result');
};
AccumuloProxyClient.prototype.nextK = function(scanner, k, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_nextK(scanner, k);
};

AccumuloProxyClient.prototype.send_nextK = function(scanner, k) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('nextK', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_nextK_args();
  args.scanner = scanner;
  args.k = k;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_nextK = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_nextK_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('nextK failed: unknown result');
};
AccumuloProxyClient.prototype.closeScanner = function(scanner, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_closeScanner(scanner);
};

AccumuloProxyClient.prototype.send_closeScanner = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('closeScanner', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_closeScanner_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_closeScanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_closeScanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  callback(null)
};
AccumuloProxyClient.prototype.updateAndFlush = function(login, tableName, cells, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateAndFlush(login, tableName, cells);
};

AccumuloProxyClient.prototype.send_updateAndFlush = function(login, tableName, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateAndFlush', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_updateAndFlush_args();
  args.login = login;
  args.tableName = tableName;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_updateAndFlush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_updateAndFlush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.outch1) {
    return callback(result.outch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.ouch4) {
    return callback(result.ouch4);
  }
  callback(null)
};
AccumuloProxyClient.prototype.createWriter = function(login, tableName, opts, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createWriter(login, tableName, opts);
};

AccumuloProxyClient.prototype.send_createWriter = function(login, tableName, opts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createWriter', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_createWriter_args();
  args.login = login;
  args.tableName = tableName;
  args.opts = opts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_createWriter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_createWriter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.outch1) {
    return callback(result.outch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  if (null !== result.ouch3) {
    return callback(result.ouch3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createWriter failed: unknown result');
};
AccumuloProxyClient.prototype.update = function(writer, cells, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_update(writer, cells);
};

AccumuloProxyClient.prototype.send_update = function(writer, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_update_args();
  args.writer = writer;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
AccumuloProxyClient.prototype.flush = function(writer, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_flush(writer);
};

AccumuloProxyClient.prototype.send_flush = function(writer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('flush', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_flush_args();
  args.writer = writer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_flush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_flush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.closeWriter = function(writer, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_closeWriter(writer);
};

AccumuloProxyClient.prototype.send_closeWriter = function(writer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('closeWriter', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_closeWriter_args();
  args.writer = writer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_closeWriter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_closeWriter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch1) {
    return callback(result.ouch1);
  }
  if (null !== result.ouch2) {
    return callback(result.ouch2);
  }
  callback(null)
};
AccumuloProxyClient.prototype.getRowRange = function(row, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowRange(row);
};

AccumuloProxyClient.prototype.send_getRowRange = function(row) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowRange', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getRowRange_args();
  args.row = row;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getRowRange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getRowRange_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowRange failed: unknown result');
};
AccumuloProxyClient.prototype.getFollowing = function(key, part, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFollowing(key, part);
};

AccumuloProxyClient.prototype.send_getFollowing = function(key, part) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFollowing', Thrift.MessageType.CALL, this.seqid);
  var args = new AccumuloProxy_getFollowing_args();
  args.key = key;
  args.part = part;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccumuloProxyClient.prototype.recv_getFollowing = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccumuloProxy_getFollowing_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFollowing failed: unknown result');
};
AccumuloProxyProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
AccumuloProxyProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

AccumuloProxyProcessor.prototype.process_login = function(seqid, input, output) {
  var args = new AccumuloProxy_login_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.login(args.principal, args.loginProperties, function (err, result) {
    var result = new AccumuloProxy_login_result((err != null ? err : {success: result}));
    output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_addConstraint = function(seqid, input, output) {
  var args = new AccumuloProxy_addConstraint_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addConstraint(args.login, args.tableName, args.constraintClassName, function (err, result) {
    var result = new AccumuloProxy_addConstraint_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addConstraint", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_addSplits = function(seqid, input, output) {
  var args = new AccumuloProxy_addSplits_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addSplits(args.login, args.tableName, args.splits, function (err, result) {
    var result = new AccumuloProxy_addSplits_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addSplits", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_attachIterator = function(seqid, input, output) {
  var args = new AccumuloProxy_attachIterator_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.attachIterator(args.login, args.tableName, args.setting, args.scopes, function (err, result) {
    var result = new AccumuloProxy_attachIterator_result((err != null ? err : {success: result}));
    output.writeMessageBegin("attachIterator", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_checkIteratorConflicts = function(seqid, input, output) {
  var args = new AccumuloProxy_checkIteratorConflicts_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.checkIteratorConflicts(args.login, args.tableName, args.setting, args.scopes, function (err, result) {
    var result = new AccumuloProxy_checkIteratorConflicts_result((err != null ? err : {success: result}));
    output.writeMessageBegin("checkIteratorConflicts", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_clearLocatorCache = function(seqid, input, output) {
  var args = new AccumuloProxy_clearLocatorCache_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.clearLocatorCache(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_clearLocatorCache_result((err != null ? err : {success: result}));
    output.writeMessageBegin("clearLocatorCache", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_cloneTable = function(seqid, input, output) {
  var args = new AccumuloProxy_cloneTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.cloneTable(args.login, args.tableName, args.newTableName, args.flush, args.propertiesToSet, args.propertiesToExclude, function (err, result) {
    var result = new AccumuloProxy_cloneTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("cloneTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_compactTable = function(seqid, input, output) {
  var args = new AccumuloProxy_compactTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.compactTable(args.login, args.tableName, args.startRow, args.endRow, args.iterators, args.flush, args.wait, function (err, result) {
    var result = new AccumuloProxy_compactTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("compactTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_cancelCompaction = function(seqid, input, output) {
  var args = new AccumuloProxy_cancelCompaction_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.cancelCompaction(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_cancelCompaction_result((err != null ? err : {success: result}));
    output.writeMessageBegin("cancelCompaction", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_createTable = function(seqid, input, output) {
  var args = new AccumuloProxy_createTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createTable(args.login, args.tableName, args.versioningIter, args.type, function (err, result) {
    var result = new AccumuloProxy_createTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_deleteTable = function(seqid, input, output) {
  var args = new AccumuloProxy_deleteTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteTable(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_deleteTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_deleteRows = function(seqid, input, output) {
  var args = new AccumuloProxy_deleteRows_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteRows(args.login, args.tableName, args.startRow, args.endRow, function (err, result) {
    var result = new AccumuloProxy_deleteRows_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteRows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_exportTable = function(seqid, input, output) {
  var args = new AccumuloProxy_exportTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.exportTable(args.login, args.tableName, args.exportDir, function (err, result) {
    var result = new AccumuloProxy_exportTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("exportTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_flushTable = function(seqid, input, output) {
  var args = new AccumuloProxy_flushTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.flushTable(args.login, args.tableName, args.startRow, args.endRow, args.wait, function (err, result) {
    var result = new AccumuloProxy_flushTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("flushTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getLocalityGroups = function(seqid, input, output) {
  var args = new AccumuloProxy_getLocalityGroups_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getLocalityGroups(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_getLocalityGroups_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getLocalityGroups", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getIteratorSetting = function(seqid, input, output) {
  var args = new AccumuloProxy_getIteratorSetting_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getIteratorSetting(args.login, args.tableName, args.iteratorName, args.scope, function (err, result) {
    var result = new AccumuloProxy_getIteratorSetting_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getIteratorSetting", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getMaxRow = function(seqid, input, output) {
  var args = new AccumuloProxy_getMaxRow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getMaxRow(args.login, args.tableName, args.auths, args.startRow, args.startInclusive, args.endRow, args.endInclusive, function (err, result) {
    var result = new AccumuloProxy_getMaxRow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getMaxRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getTableProperties = function(seqid, input, output) {
  var args = new AccumuloProxy_getTableProperties_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTableProperties(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_getTableProperties_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTableProperties", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_importDirectory = function(seqid, input, output) {
  var args = new AccumuloProxy_importDirectory_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.importDirectory(args.login, args.tableName, args.importDir, args.failureDir, args.setTime, function (err, result) {
    var result = new AccumuloProxy_importDirectory_result((err != null ? err : {success: result}));
    output.writeMessageBegin("importDirectory", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_importTable = function(seqid, input, output) {
  var args = new AccumuloProxy_importTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.importTable(args.login, args.tableName, args.importDir, function (err, result) {
    var result = new AccumuloProxy_importTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("importTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_listSplits = function(seqid, input, output) {
  var args = new AccumuloProxy_listSplits_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.listSplits(args.login, args.tableName, args.maxSplits, function (err, result) {
    var result = new AccumuloProxy_listSplits_result((err != null ? err : {success: result}));
    output.writeMessageBegin("listSplits", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_listTables = function(seqid, input, output) {
  var args = new AccumuloProxy_listTables_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.listTables(args.login, function (err, result) {
    var result = new AccumuloProxy_listTables_result((err != null ? err : {success: result}));
    output.writeMessageBegin("listTables", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_listIterators = function(seqid, input, output) {
  var args = new AccumuloProxy_listIterators_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.listIterators(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_listIterators_result((err != null ? err : {success: result}));
    output.writeMessageBegin("listIterators", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_listConstraints = function(seqid, input, output) {
  var args = new AccumuloProxy_listConstraints_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.listConstraints(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_listConstraints_result((err != null ? err : {success: result}));
    output.writeMessageBegin("listConstraints", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_mergeTablets = function(seqid, input, output) {
  var args = new AccumuloProxy_mergeTablets_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mergeTablets(args.login, args.tableName, args.startRow, args.endRow, function (err, result) {
    var result = new AccumuloProxy_mergeTablets_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mergeTablets", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_offlineTable = function(seqid, input, output) {
  var args = new AccumuloProxy_offlineTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.offlineTable(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_offlineTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("offlineTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_onlineTable = function(seqid, input, output) {
  var args = new AccumuloProxy_onlineTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.onlineTable(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_onlineTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("onlineTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_removeConstraint = function(seqid, input, output) {
  var args = new AccumuloProxy_removeConstraint_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.removeConstraint(args.login, args.tableName, args.constraint, function (err, result) {
    var result = new AccumuloProxy_removeConstraint_result((err != null ? err : {success: result}));
    output.writeMessageBegin("removeConstraint", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_removeIterator = function(seqid, input, output) {
  var args = new AccumuloProxy_removeIterator_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.removeIterator(args.login, args.tableName, args.iterName, args.scopes, function (err, result) {
    var result = new AccumuloProxy_removeIterator_result((err != null ? err : {success: result}));
    output.writeMessageBegin("removeIterator", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_removeTableProperty = function(seqid, input, output) {
  var args = new AccumuloProxy_removeTableProperty_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.removeTableProperty(args.login, args.tableName, args.property, function (err, result) {
    var result = new AccumuloProxy_removeTableProperty_result((err != null ? err : {success: result}));
    output.writeMessageBegin("removeTableProperty", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_renameTable = function(seqid, input, output) {
  var args = new AccumuloProxy_renameTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.renameTable(args.login, args.oldTableName, args.newTableName, function (err, result) {
    var result = new AccumuloProxy_renameTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("renameTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_setLocalityGroups = function(seqid, input, output) {
  var args = new AccumuloProxy_setLocalityGroups_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.setLocalityGroups(args.login, args.tableName, args.groups, function (err, result) {
    var result = new AccumuloProxy_setLocalityGroups_result((err != null ? err : {success: result}));
    output.writeMessageBegin("setLocalityGroups", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_setTableProperty = function(seqid, input, output) {
  var args = new AccumuloProxy_setTableProperty_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.setTableProperty(args.login, args.tableName, args.property, args.value, function (err, result) {
    var result = new AccumuloProxy_setTableProperty_result((err != null ? err : {success: result}));
    output.writeMessageBegin("setTableProperty", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_splitRangeByTablets = function(seqid, input, output) {
  var args = new AccumuloProxy_splitRangeByTablets_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.splitRangeByTablets(args.login, args.tableName, args.range, args.maxSplits, function (err, result) {
    var result = new AccumuloProxy_splitRangeByTablets_result((err != null ? err : {success: result}));
    output.writeMessageBegin("splitRangeByTablets", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_tableExists = function(seqid, input, output) {
  var args = new AccumuloProxy_tableExists_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.tableExists(args.login, args.tableName, function (err, result) {
    var result = new AccumuloProxy_tableExists_result((err != null ? err : {success: result}));
    output.writeMessageBegin("tableExists", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_tableIdMap = function(seqid, input, output) {
  var args = new AccumuloProxy_tableIdMap_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.tableIdMap(args.login, function (err, result) {
    var result = new AccumuloProxy_tableIdMap_result((err != null ? err : {success: result}));
    output.writeMessageBegin("tableIdMap", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_testTableClassLoad = function(seqid, input, output) {
  var args = new AccumuloProxy_testTableClassLoad_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.testTableClassLoad(args.login, args.tableName, args.className, args.asTypeName, function (err, result) {
    var result = new AccumuloProxy_testTableClassLoad_result((err != null ? err : {success: result}));
    output.writeMessageBegin("testTableClassLoad", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_pingTabletServer = function(seqid, input, output) {
  var args = new AccumuloProxy_pingTabletServer_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.pingTabletServer(args.login, args.tserver, function (err, result) {
    var result = new AccumuloProxy_pingTabletServer_result((err != null ? err : {success: result}));
    output.writeMessageBegin("pingTabletServer", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getActiveScans = function(seqid, input, output) {
  var args = new AccumuloProxy_getActiveScans_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getActiveScans(args.login, args.tserver, function (err, result) {
    var result = new AccumuloProxy_getActiveScans_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getActiveScans", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getActiveCompactions = function(seqid, input, output) {
  var args = new AccumuloProxy_getActiveCompactions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getActiveCompactions(args.login, args.tserver, function (err, result) {
    var result = new AccumuloProxy_getActiveCompactions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getActiveCompactions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getSiteConfiguration = function(seqid, input, output) {
  var args = new AccumuloProxy_getSiteConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getSiteConfiguration(args.login, function (err, result) {
    var result = new AccumuloProxy_getSiteConfiguration_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getSiteConfiguration", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getSystemConfiguration = function(seqid, input, output) {
  var args = new AccumuloProxy_getSystemConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getSystemConfiguration(args.login, function (err, result) {
    var result = new AccumuloProxy_getSystemConfiguration_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getSystemConfiguration", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getTabletServers = function(seqid, input, output) {
  var args = new AccumuloProxy_getTabletServers_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTabletServers(args.login, function (err, result) {
    var result = new AccumuloProxy_getTabletServers_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTabletServers", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_removeProperty = function(seqid, input, output) {
  var args = new AccumuloProxy_removeProperty_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.removeProperty(args.login, args.property, function (err, result) {
    var result = new AccumuloProxy_removeProperty_result((err != null ? err : {success: result}));
    output.writeMessageBegin("removeProperty", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_setProperty = function(seqid, input, output) {
  var args = new AccumuloProxy_setProperty_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.setProperty(args.login, args.property, args.value, function (err, result) {
    var result = new AccumuloProxy_setProperty_result((err != null ? err : {success: result}));
    output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_testClassLoad = function(seqid, input, output) {
  var args = new AccumuloProxy_testClassLoad_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.testClassLoad(args.login, args.className, args.asTypeName, function (err, result) {
    var result = new AccumuloProxy_testClassLoad_result((err != null ? err : {success: result}));
    output.writeMessageBegin("testClassLoad", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_authenticateUser = function(seqid, input, output) {
  var args = new AccumuloProxy_authenticateUser_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.authenticateUser(args.login, args.user, args.properties, function (err, result) {
    var result = new AccumuloProxy_authenticateUser_result((err != null ? err : {success: result}));
    output.writeMessageBegin("authenticateUser", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_changeUserAuthorizations = function(seqid, input, output) {
  var args = new AccumuloProxy_changeUserAuthorizations_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.changeUserAuthorizations(args.login, args.user, args.authorizations, function (err, result) {
    var result = new AccumuloProxy_changeUserAuthorizations_result((err != null ? err : {success: result}));
    output.writeMessageBegin("changeUserAuthorizations", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_changeLocalUserPassword = function(seqid, input, output) {
  var args = new AccumuloProxy_changeLocalUserPassword_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.changeLocalUserPassword(args.login, args.user, args.password, function (err, result) {
    var result = new AccumuloProxy_changeLocalUserPassword_result((err != null ? err : {success: result}));
    output.writeMessageBegin("changeLocalUserPassword", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_createLocalUser = function(seqid, input, output) {
  var args = new AccumuloProxy_createLocalUser_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createLocalUser(args.login, args.user, args.password, function (err, result) {
    var result = new AccumuloProxy_createLocalUser_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createLocalUser", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_dropLocalUser = function(seqid, input, output) {
  var args = new AccumuloProxy_dropLocalUser_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.dropLocalUser(args.login, args.user, function (err, result) {
    var result = new AccumuloProxy_dropLocalUser_result((err != null ? err : {success: result}));
    output.writeMessageBegin("dropLocalUser", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getUserAuthorizations = function(seqid, input, output) {
  var args = new AccumuloProxy_getUserAuthorizations_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getUserAuthorizations(args.login, args.user, function (err, result) {
    var result = new AccumuloProxy_getUserAuthorizations_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getUserAuthorizations", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_grantSystemPermission = function(seqid, input, output) {
  var args = new AccumuloProxy_grantSystemPermission_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.grantSystemPermission(args.login, args.user, args.perm, function (err, result) {
    var result = new AccumuloProxy_grantSystemPermission_result((err != null ? err : {success: result}));
    output.writeMessageBegin("grantSystemPermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_grantTablePermission = function(seqid, input, output) {
  var args = new AccumuloProxy_grantTablePermission_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.grantTablePermission(args.login, args.user, args.table, args.perm, function (err, result) {
    var result = new AccumuloProxy_grantTablePermission_result((err != null ? err : {success: result}));
    output.writeMessageBegin("grantTablePermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_hasSystemPermission = function(seqid, input, output) {
  var args = new AccumuloProxy_hasSystemPermission_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.hasSystemPermission(args.login, args.user, args.perm, function (err, result) {
    var result = new AccumuloProxy_hasSystemPermission_result((err != null ? err : {success: result}));
    output.writeMessageBegin("hasSystemPermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_hasTablePermission = function(seqid, input, output) {
  var args = new AccumuloProxy_hasTablePermission_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.hasTablePermission(args.login, args.user, args.table, args.perm, function (err, result) {
    var result = new AccumuloProxy_hasTablePermission_result((err != null ? err : {success: result}));
    output.writeMessageBegin("hasTablePermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_listLocalUsers = function(seqid, input, output) {
  var args = new AccumuloProxy_listLocalUsers_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.listLocalUsers(args.login, function (err, result) {
    var result = new AccumuloProxy_listLocalUsers_result((err != null ? err : {success: result}));
    output.writeMessageBegin("listLocalUsers", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_revokeSystemPermission = function(seqid, input, output) {
  var args = new AccumuloProxy_revokeSystemPermission_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.revokeSystemPermission(args.login, args.user, args.perm, function (err, result) {
    var result = new AccumuloProxy_revokeSystemPermission_result((err != null ? err : {success: result}));
    output.writeMessageBegin("revokeSystemPermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_revokeTablePermission = function(seqid, input, output) {
  var args = new AccumuloProxy_revokeTablePermission_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.revokeTablePermission(args.login, args.user, args.table, args.perm, function (err, result) {
    var result = new AccumuloProxy_revokeTablePermission_result((err != null ? err : {success: result}));
    output.writeMessageBegin("revokeTablePermission", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_createBatchScanner = function(seqid, input, output) {
  var args = new AccumuloProxy_createBatchScanner_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createBatchScanner(args.login, args.tableName, args.options, function (err, result) {
    var result = new AccumuloProxy_createBatchScanner_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createBatchScanner", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_createScanner = function(seqid, input, output) {
  var args = new AccumuloProxy_createScanner_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createScanner(args.login, args.tableName, args.options, function (err, result) {
    var result = new AccumuloProxy_createScanner_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createScanner", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_hasNext = function(seqid, input, output) {
  var args = new AccumuloProxy_hasNext_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.hasNext(args.scanner, function (err, result) {
    var result = new AccumuloProxy_hasNext_result((err != null ? err : {success: result}));
    output.writeMessageBegin("hasNext", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_nextEntry = function(seqid, input, output) {
  var args = new AccumuloProxy_nextEntry_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.nextEntry(args.scanner, function (err, result) {
    var result = new AccumuloProxy_nextEntry_result((err != null ? err : {success: result}));
    output.writeMessageBegin("nextEntry", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_nextK = function(seqid, input, output) {
  var args = new AccumuloProxy_nextK_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.nextK(args.scanner, args.k, function (err, result) {
    var result = new AccumuloProxy_nextK_result((err != null ? err : {success: result}));
    output.writeMessageBegin("nextK", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_closeScanner = function(seqid, input, output) {
  var args = new AccumuloProxy_closeScanner_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.closeScanner(args.scanner, function (err, result) {
    var result = new AccumuloProxy_closeScanner_result((err != null ? err : {success: result}));
    output.writeMessageBegin("closeScanner", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_updateAndFlush = function(seqid, input, output) {
  var args = new AccumuloProxy_updateAndFlush_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.updateAndFlush(args.login, args.tableName, args.cells, function (err, result) {
    var result = new AccumuloProxy_updateAndFlush_result((err != null ? err : {success: result}));
    output.writeMessageBegin("updateAndFlush", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_createWriter = function(seqid, input, output) {
  var args = new AccumuloProxy_createWriter_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createWriter(args.login, args.tableName, args.opts, function (err, result) {
    var result = new AccumuloProxy_createWriter_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createWriter", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_update = function(seqid, input, output) {
  var args = new AccumuloProxy_update_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.update(args.writer, args.cells)
}

AccumuloProxyProcessor.prototype.process_flush = function(seqid, input, output) {
  var args = new AccumuloProxy_flush_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.flush(args.writer, function (err, result) {
    var result = new AccumuloProxy_flush_result((err != null ? err : {success: result}));
    output.writeMessageBegin("flush", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_closeWriter = function(seqid, input, output) {
  var args = new AccumuloProxy_closeWriter_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.closeWriter(args.writer, function (err, result) {
    var result = new AccumuloProxy_closeWriter_result((err != null ? err : {success: result}));
    output.writeMessageBegin("closeWriter", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getRowRange = function(seqid, input, output) {
  var args = new AccumuloProxy_getRowRange_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowRange(args.row, function (err, result) {
    var result = new AccumuloProxy_getRowRange_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowRange", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AccumuloProxyProcessor.prototype.process_getFollowing = function(seqid, input, output) {
  var args = new AccumuloProxy_getFollowing_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getFollowing(args.key, args.part, function (err, result) {
    var result = new AccumuloProxy_getFollowing_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getFollowing", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

