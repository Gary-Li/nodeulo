//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.PartialKey = {
'ROW' : 0,
'ROW_COLFAM' : 1,
'ROW_COLFAM_COLQUAL' : 2,
'ROW_COLFAM_COLQUAL_COLVIS' : 3,
'ROW_COLFAM_COLQUAL_COLVIS_TIME' : 4,
'ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL' : 5
};
ttypes.TablePermission = {
'READ' : 2,
'WRITE' : 3,
'BULK_IMPORT' : 4,
'ALTER_TABLE' : 5,
'GRANT' : 6,
'DROP_TABLE' : 7
};
ttypes.SystemPermission = {
'GRANT' : 0,
'CREATE_TABLE' : 1,
'DROP_TABLE' : 2,
'ALTER_TABLE' : 3,
'CREATE_USER' : 4,
'DROP_USER' : 5,
'ALTER_USER' : 6,
'SYSTEM' : 7
};
ttypes.ScanType = {
'SINGLE' : 0,
'BATCH' : 1
};
ttypes.ScanState = {
'IDLE' : 0,
'RUNNING' : 1,
'QUEUED' : 2
};
ttypes.CompactionType = {
'MINOR' : 0,
'MERGE' : 1,
'MAJOR' : 2,
'FULL' : 3
};
ttypes.CompactionReason = {
'USER' : 0,
'SYSTEM' : 1,
'CHOP' : 2,
'IDLE' : 3,
'CLOSE' : 4
};
ttypes.IteratorScope = {
'MINC' : 0,
'MAJC' : 1,
'SCAN' : 2
};
ttypes.TimeType = {
'LOGICAL' : 0,
'MILLIS' : 1
};
Key = module.exports.Key = function(args) {
  this.row = null;
  this.colFamily = null;
  this.colQualifier = null;
  this.colVisibility = null;
  this.timestamp = null;
  if (args) {
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.colFamily !== undefined) {
      this.colFamily = args.colFamily;
    }
    if (args.colQualifier !== undefined) {
      this.colQualifier = args.colQualifier;
    }
    if (args.colVisibility !== undefined) {
      this.colVisibility = args.colVisibility;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
Key.prototype = {};
Key.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.colFamily = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.colQualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.colVisibility = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Key.prototype.write = function(output) {
  output.writeStructBegin('Key');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.colFamily !== null && this.colFamily !== undefined) {
    output.writeFieldBegin('colFamily', Thrift.Type.STRING, 2);
    output.writeString(this.colFamily);
    output.writeFieldEnd();
  }
  if (this.colQualifier !== null && this.colQualifier !== undefined) {
    output.writeFieldBegin('colQualifier', Thrift.Type.STRING, 3);
    output.writeString(this.colQualifier);
    output.writeFieldEnd();
  }
  if (this.colVisibility !== null && this.colVisibility !== undefined) {
    output.writeFieldBegin('colVisibility', Thrift.Type.STRING, 4);
    output.writeString(this.colVisibility);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnUpdate = module.exports.ColumnUpdate = function(args) {
  this.colFamily = null;
  this.colQualifier = null;
  this.colVisibility = null;
  this.timestamp = null;
  this.value = null;
  this.deleteCell = null;
  if (args) {
    if (args.colFamily !== undefined) {
      this.colFamily = args.colFamily;
    }
    if (args.colQualifier !== undefined) {
      this.colQualifier = args.colQualifier;
    }
    if (args.colVisibility !== undefined) {
      this.colVisibility = args.colVisibility;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.deleteCell !== undefined) {
      this.deleteCell = args.deleteCell;
    }
  }
};
ColumnUpdate.prototype = {};
ColumnUpdate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.colFamily = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.colQualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.colVisibility = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteCell = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnUpdate.prototype.write = function(output) {
  output.writeStructBegin('ColumnUpdate');
  if (this.colFamily !== null && this.colFamily !== undefined) {
    output.writeFieldBegin('colFamily', Thrift.Type.STRING, 1);
    output.writeString(this.colFamily);
    output.writeFieldEnd();
  }
  if (this.colQualifier !== null && this.colQualifier !== undefined) {
    output.writeFieldBegin('colQualifier', Thrift.Type.STRING, 2);
    output.writeString(this.colQualifier);
    output.writeFieldEnd();
  }
  if (this.colVisibility !== null && this.colVisibility !== undefined) {
    output.writeFieldBegin('colVisibility', Thrift.Type.STRING, 3);
    output.writeString(this.colVisibility);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.deleteCell !== null && this.deleteCell !== undefined) {
    output.writeFieldBegin('deleteCell', Thrift.Type.BOOL, 6);
    output.writeBool(this.deleteCell);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyValue = module.exports.KeyValue = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
KeyValue.prototype = {};
KeyValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.Key();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyValue.prototype.write = function(output) {
  output.writeStructBegin('KeyValue');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanResult = module.exports.ScanResult = function(args) {
  this.results = null;
  this.more = null;
  if (args) {
    if (args.results !== undefined) {
      this.results = args.results;
    }
    if (args.more !== undefined) {
      this.more = args.more;
    }
  }
};
ScanResult.prototype = {};
ScanResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.results = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.KeyValue();
          elem6.read(input);
          this.results.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.more = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanResult.prototype.write = function(output) {
  output.writeStructBegin('ScanResult');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter7 in this.results)
    {
      if (this.results.hasOwnProperty(iter7))
      {
        iter7 = this.results[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.more !== null && this.more !== undefined) {
    output.writeFieldBegin('more', Thrift.Type.BOOL, 2);
    output.writeBool(this.more);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Range = module.exports.Range = function(args) {
  this.start = null;
  this.startInclusive = null;
  this.stop = null;
  this.stopInclusive = null;
  if (args) {
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.startInclusive !== undefined) {
      this.startInclusive = args.startInclusive;
    }
    if (args.stop !== undefined) {
      this.stop = args.stop;
    }
    if (args.stopInclusive !== undefined) {
      this.stopInclusive = args.stopInclusive;
    }
  }
};
Range.prototype = {};
Range.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.start = new ttypes.Key();
        this.start.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.startInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.stop = new ttypes.Key();
        this.stop.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.stopInclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Range.prototype.write = function(output) {
  output.writeStructBegin('Range');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.STRUCT, 1);
    this.start.write(output);
    output.writeFieldEnd();
  }
  if (this.startInclusive !== null && this.startInclusive !== undefined) {
    output.writeFieldBegin('startInclusive', Thrift.Type.BOOL, 2);
    output.writeBool(this.startInclusive);
    output.writeFieldEnd();
  }
  if (this.stop !== null && this.stop !== undefined) {
    output.writeFieldBegin('stop', Thrift.Type.STRUCT, 3);
    this.stop.write(output);
    output.writeFieldEnd();
  }
  if (this.stopInclusive !== null && this.stopInclusive !== undefined) {
    output.writeFieldBegin('stopInclusive', Thrift.Type.BOOL, 4);
    output.writeBool(this.stopInclusive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanColumn = module.exports.ScanColumn = function(args) {
  this.colFamily = null;
  this.colQualifier = null;
  if (args) {
    if (args.colFamily !== undefined) {
      this.colFamily = args.colFamily;
    }
    if (args.colQualifier !== undefined) {
      this.colQualifier = args.colQualifier;
    }
  }
};
ScanColumn.prototype = {};
ScanColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.colFamily = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.colQualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanColumn.prototype.write = function(output) {
  output.writeStructBegin('ScanColumn');
  if (this.colFamily !== null && this.colFamily !== undefined) {
    output.writeFieldBegin('colFamily', Thrift.Type.STRING, 1);
    output.writeString(this.colFamily);
    output.writeFieldEnd();
  }
  if (this.colQualifier !== null && this.colQualifier !== undefined) {
    output.writeFieldBegin('colQualifier', Thrift.Type.STRING, 2);
    output.writeString(this.colQualifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IteratorSetting = module.exports.IteratorSetting = function(args) {
  this.priority = null;
  this.name = null;
  this.iteratorClass = null;
  this.properties = null;
  if (args) {
    if (args.priority !== undefined) {
      this.priority = args.priority;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.iteratorClass !== undefined) {
      this.iteratorClass = args.iteratorClass;
    }
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
  }
};
IteratorSetting.prototype = {};
IteratorSetting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.iteratorClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.properties = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = input.readString();
          this.properties[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IteratorSetting.prototype.write = function(output) {
  output.writeStructBegin('IteratorSetting');
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 1);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.iteratorClass !== null && this.iteratorClass !== undefined) {
    output.writeFieldBegin('iteratorClass', Thrift.Type.STRING, 3);
    output.writeString(this.iteratorClass);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter16 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter16))
      {
        var viter17 = this.properties[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanOptions = module.exports.ScanOptions = function(args) {
  this.authorizations = null;
  this.range = null;
  this.columns = null;
  this.iterators = null;
  this.bufferSize = null;
  if (args) {
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.iterators !== undefined) {
      this.iterators = args.iterators;
    }
    if (args.bufferSize !== undefined) {
      this.bufferSize = args.bufferSize;
    }
  }
};
ScanOptions.prototype = {};
ScanOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size18 = 0;
        var _rtmp322;
        this.authorizations = [];
        var _etype21 = 0;
        _rtmp322 = input.readSetBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString();
          this.authorizations.push(elem24);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.Range();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size25 = 0;
        var _rtmp329;
        this.columns = [];
        var _etype28 = 0;
        _rtmp329 = input.readListBegin();
        _etype28 = _rtmp329.etype;
        _size25 = _rtmp329.size;
        for (var _i30 = 0; _i30 < _size25; ++_i30)
        {
          var elem31 = null;
          elem31 = new ttypes.ScanColumn();
          elem31.read(input);
          this.columns.push(elem31);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.iterators = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.IteratorSetting();
          elem38.read(input);
          this.iterators.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.bufferSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanOptions.prototype.write = function(output) {
  output.writeStructBegin('ScanOptions');
  if (this.authorizations !== null && this.authorizations !== undefined) {
    output.writeFieldBegin('authorizations', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.authorizations.length);
    for (var iter39 in this.authorizations)
    {
      if (this.authorizations.hasOwnProperty(iter39))
      {
        iter39 = this.authorizations[iter39];
        output.writeString(iter39);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 2);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter40 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter40))
      {
        iter40 = this.columns[iter40];
        iter40.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.iterators !== null && this.iterators !== undefined) {
    output.writeFieldBegin('iterators', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.iterators.length);
    for (var iter41 in this.iterators)
    {
      if (this.iterators.hasOwnProperty(iter41))
      {
        iter41 = this.iterators[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bufferSize !== null && this.bufferSize !== undefined) {
    output.writeFieldBegin('bufferSize', Thrift.Type.I32, 5);
    output.writeI32(this.bufferSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchScanOptions = module.exports.BatchScanOptions = function(args) {
  this.authorizations = null;
  this.ranges = null;
  this.columns = null;
  this.iterators = null;
  this.threads = null;
  if (args) {
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
    if (args.ranges !== undefined) {
      this.ranges = args.ranges;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.iterators !== undefined) {
      this.iterators = args.iterators;
    }
    if (args.threads !== undefined) {
      this.threads = args.threads;
    }
  }
};
BatchScanOptions.prototype = {};
BatchScanOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size42 = 0;
        var _rtmp346;
        this.authorizations = [];
        var _etype45 = 0;
        _rtmp346 = input.readSetBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.authorizations.push(elem48);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.ranges = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = new ttypes.Range();
          elem55.read(input);
          this.ranges.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.columns = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.ScanColumn();
          elem62.read(input);
          this.columns.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.iterators = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new ttypes.IteratorSetting();
          elem69.read(input);
          this.iterators.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.threads = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchScanOptions.prototype.write = function(output) {
  output.writeStructBegin('BatchScanOptions');
  if (this.authorizations !== null && this.authorizations !== undefined) {
    output.writeFieldBegin('authorizations', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.authorizations.length);
    for (var iter70 in this.authorizations)
    {
      if (this.authorizations.hasOwnProperty(iter70))
      {
        iter70 = this.authorizations[iter70];
        output.writeString(iter70);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.ranges !== null && this.ranges !== undefined) {
    output.writeFieldBegin('ranges', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ranges.length);
    for (var iter71 in this.ranges)
    {
      if (this.ranges.hasOwnProperty(iter71))
      {
        iter71 = this.ranges[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter72 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter72))
      {
        iter72 = this.columns[iter72];
        iter72.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.iterators !== null && this.iterators !== undefined) {
    output.writeFieldBegin('iterators', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.iterators.length);
    for (var iter73 in this.iterators)
    {
      if (this.iterators.hasOwnProperty(iter73))
      {
        iter73 = this.iterators[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.threads !== null && this.threads !== undefined) {
    output.writeFieldBegin('threads', Thrift.Type.I32, 5);
    output.writeI32(this.threads);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyValueAndPeek = module.exports.KeyValueAndPeek = function(args) {
  this.keyValue = null;
  this.hasNext = null;
  if (args) {
    if (args.keyValue !== undefined) {
      this.keyValue = args.keyValue;
    }
    if (args.hasNext !== undefined) {
      this.hasNext = args.hasNext;
    }
  }
};
KeyValueAndPeek.prototype = {};
KeyValueAndPeek.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyValue = new ttypes.KeyValue();
        this.keyValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyValueAndPeek.prototype.write = function(output) {
  output.writeStructBegin('KeyValueAndPeek');
  if (this.keyValue !== null && this.keyValue !== undefined) {
    output.writeFieldBegin('keyValue', Thrift.Type.STRUCT, 1);
    this.keyValue.write(output);
    output.writeFieldEnd();
  }
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyExtent = module.exports.KeyExtent = function(args) {
  this.tableId = null;
  this.endRow = null;
  this.prevEndRow = null;
  if (args) {
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.endRow !== undefined) {
      this.endRow = args.endRow;
    }
    if (args.prevEndRow !== undefined) {
      this.prevEndRow = args.prevEndRow;
    }
  }
};
KeyExtent.prototype = {};
KeyExtent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.prevEndRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyExtent.prototype.write = function(output) {
  output.writeStructBegin('KeyExtent');
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 1);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.endRow !== null && this.endRow !== undefined) {
    output.writeFieldBegin('endRow', Thrift.Type.STRING, 2);
    output.writeString(this.endRow);
    output.writeFieldEnd();
  }
  if (this.prevEndRow !== null && this.prevEndRow !== undefined) {
    output.writeFieldBegin('prevEndRow', Thrift.Type.STRING, 3);
    output.writeString(this.prevEndRow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Column = module.exports.Column = function(args) {
  this.colFamily = null;
  this.colQualifier = null;
  this.colVisibility = null;
  if (args) {
    if (args.colFamily !== undefined) {
      this.colFamily = args.colFamily;
    }
    if (args.colQualifier !== undefined) {
      this.colQualifier = args.colQualifier;
    }
    if (args.colVisibility !== undefined) {
      this.colVisibility = args.colVisibility;
    }
  }
};
Column.prototype = {};
Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.colFamily = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.colQualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.colVisibility = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Column.prototype.write = function(output) {
  output.writeStructBegin('Column');
  if (this.colFamily !== null && this.colFamily !== undefined) {
    output.writeFieldBegin('colFamily', Thrift.Type.STRING, 1);
    output.writeString(this.colFamily);
    output.writeFieldEnd();
  }
  if (this.colQualifier !== null && this.colQualifier !== undefined) {
    output.writeFieldBegin('colQualifier', Thrift.Type.STRING, 2);
    output.writeString(this.colQualifier);
    output.writeFieldEnd();
  }
  if (this.colVisibility !== null && this.colVisibility !== undefined) {
    output.writeFieldBegin('colVisibility', Thrift.Type.STRING, 3);
    output.writeString(this.colVisibility);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveScan = module.exports.ActiveScan = function(args) {
  this.client = null;
  this.user = null;
  this.table = null;
  this.age = null;
  this.idleTime = null;
  this.type = null;
  this.state = null;
  this.extent = null;
  this.columns = null;
  this.iterators = null;
  this.authorizations = null;
  if (args) {
    if (args.client !== undefined) {
      this.client = args.client;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.age !== undefined) {
      this.age = args.age;
    }
    if (args.idleTime !== undefined) {
      this.idleTime = args.idleTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.iterators !== undefined) {
      this.iterators = args.iterators;
    }
    if (args.authorizations !== undefined) {
      this.authorizations = args.authorizations;
    }
  }
};
ActiveScan.prototype = {};
ActiveScan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.client = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.age = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.idleTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new ttypes.KeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.columns = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new ttypes.Column();
          elem80.read(input);
          this.columns.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size81 = 0;
        var _rtmp385;
        this.iterators = [];
        var _etype84 = 0;
        _rtmp385 = input.readListBegin();
        _etype84 = _rtmp385.etype;
        _size81 = _rtmp385.size;
        for (var _i86 = 0; _i86 < _size81; ++_i86)
        {
          var elem87 = null;
          elem87 = new ttypes.IteratorSetting();
          elem87.read(input);
          this.iterators.push(elem87);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.authorizations = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.authorizations.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveScan.prototype.write = function(output) {
  output.writeStructBegin('ActiveScan');
  if (this.client !== null && this.client !== undefined) {
    output.writeFieldBegin('client', Thrift.Type.STRING, 1);
    output.writeString(this.client);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 3);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.age !== null && this.age !== undefined) {
    output.writeFieldBegin('age', Thrift.Type.I64, 4);
    output.writeI64(this.age);
    output.writeFieldEnd();
  }
  if (this.idleTime !== null && this.idleTime !== undefined) {
    output.writeFieldBegin('idleTime', Thrift.Type.I64, 5);
    output.writeI64(this.idleTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 7);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.extent !== null && this.extent !== undefined) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 8);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter95 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter95))
      {
        iter95 = this.columns[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.iterators !== null && this.iterators !== undefined) {
    output.writeFieldBegin('iterators', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.iterators.length);
    for (var iter96 in this.iterators)
    {
      if (this.iterators.hasOwnProperty(iter96))
      {
        iter96 = this.iterators[iter96];
        iter96.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.authorizations !== null && this.authorizations !== undefined) {
    output.writeFieldBegin('authorizations', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.authorizations.length);
    for (var iter97 in this.authorizations)
    {
      if (this.authorizations.hasOwnProperty(iter97))
      {
        iter97 = this.authorizations[iter97];
        output.writeString(iter97);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveCompaction = module.exports.ActiveCompaction = function(args) {
  this.extent = null;
  this.age = null;
  this.inputFiles = null;
  this.outputFile = null;
  this.type = null;
  this.reason = null;
  this.localityGroup = null;
  this.entriesRead = null;
  this.entriesWritten = null;
  this.iterators = null;
  if (args) {
    if (args.extent !== undefined) {
      this.extent = args.extent;
    }
    if (args.age !== undefined) {
      this.age = args.age;
    }
    if (args.inputFiles !== undefined) {
      this.inputFiles = args.inputFiles;
    }
    if (args.outputFile !== undefined) {
      this.outputFile = args.outputFile;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
    if (args.localityGroup !== undefined) {
      this.localityGroup = args.localityGroup;
    }
    if (args.entriesRead !== undefined) {
      this.entriesRead = args.entriesRead;
    }
    if (args.entriesWritten !== undefined) {
      this.entriesWritten = args.entriesWritten;
    }
    if (args.iterators !== undefined) {
      this.iterators = args.iterators;
    }
  }
};
ActiveCompaction.prototype = {};
ActiveCompaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.extent = new ttypes.KeyExtent();
        this.extent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.age = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.inputFiles = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = input.readString();
          this.inputFiles.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.outputFile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.reason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.localityGroup = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.entriesRead = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.entriesWritten = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size105 = 0;
        var _rtmp3109;
        this.iterators = [];
        var _etype108 = 0;
        _rtmp3109 = input.readListBegin();
        _etype108 = _rtmp3109.etype;
        _size105 = _rtmp3109.size;
        for (var _i110 = 0; _i110 < _size105; ++_i110)
        {
          var elem111 = null;
          elem111 = new ttypes.IteratorSetting();
          elem111.read(input);
          this.iterators.push(elem111);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveCompaction.prototype.write = function(output) {
  output.writeStructBegin('ActiveCompaction');
  if (this.extent !== null && this.extent !== undefined) {
    output.writeFieldBegin('extent', Thrift.Type.STRUCT, 1);
    this.extent.write(output);
    output.writeFieldEnd();
  }
  if (this.age !== null && this.age !== undefined) {
    output.writeFieldBegin('age', Thrift.Type.I64, 2);
    output.writeI64(this.age);
    output.writeFieldEnd();
  }
  if (this.inputFiles !== null && this.inputFiles !== undefined) {
    output.writeFieldBegin('inputFiles', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.inputFiles.length);
    for (var iter112 in this.inputFiles)
    {
      if (this.inputFiles.hasOwnProperty(iter112))
      {
        iter112 = this.inputFiles[iter112];
        output.writeString(iter112);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputFile !== null && this.outputFile !== undefined) {
    output.writeFieldBegin('outputFile', Thrift.Type.STRING, 4);
    output.writeString(this.outputFile);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.I32, 6);
    output.writeI32(this.reason);
    output.writeFieldEnd();
  }
  if (this.localityGroup !== null && this.localityGroup !== undefined) {
    output.writeFieldBegin('localityGroup', Thrift.Type.STRING, 7);
    output.writeString(this.localityGroup);
    output.writeFieldEnd();
  }
  if (this.entriesRead !== null && this.entriesRead !== undefined) {
    output.writeFieldBegin('entriesRead', Thrift.Type.I64, 8);
    output.writeI64(this.entriesRead);
    output.writeFieldEnd();
  }
  if (this.entriesWritten !== null && this.entriesWritten !== undefined) {
    output.writeFieldBegin('entriesWritten', Thrift.Type.I64, 9);
    output.writeI64(this.entriesWritten);
    output.writeFieldEnd();
  }
  if (this.iterators !== null && this.iterators !== undefined) {
    output.writeFieldBegin('iterators', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.iterators.length);
    for (var iter113 in this.iterators)
    {
      if (this.iterators.hasOwnProperty(iter113))
      {
        iter113 = this.iterators[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WriterOptions = module.exports.WriterOptions = function(args) {
  this.maxMemory = null;
  this.latencyMs = null;
  this.timeoutMs = null;
  this.threads = null;
  if (args) {
    if (args.maxMemory !== undefined) {
      this.maxMemory = args.maxMemory;
    }
    if (args.latencyMs !== undefined) {
      this.latencyMs = args.latencyMs;
    }
    if (args.timeoutMs !== undefined) {
      this.timeoutMs = args.timeoutMs;
    }
    if (args.threads !== undefined) {
      this.threads = args.threads;
    }
  }
};
WriterOptions.prototype = {};
WriterOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.maxMemory = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.latencyMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timeoutMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.threads = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WriterOptions.prototype.write = function(output) {
  output.writeStructBegin('WriterOptions');
  if (this.maxMemory !== null && this.maxMemory !== undefined) {
    output.writeFieldBegin('maxMemory', Thrift.Type.I64, 1);
    output.writeI64(this.maxMemory);
    output.writeFieldEnd();
  }
  if (this.latencyMs !== null && this.latencyMs !== undefined) {
    output.writeFieldBegin('latencyMs', Thrift.Type.I64, 2);
    output.writeI64(this.latencyMs);
    output.writeFieldEnd();
  }
  if (this.timeoutMs !== null && this.timeoutMs !== undefined) {
    output.writeFieldBegin('timeoutMs', Thrift.Type.I64, 3);
    output.writeI64(this.timeoutMs);
    output.writeFieldEnd();
  }
  if (this.threads !== null && this.threads !== undefined) {
    output.writeFieldBegin('threads', Thrift.Type.I32, 4);
    output.writeI32(this.threads);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownScanner = module.exports.UnknownScanner = function(args) {
  Thrift.TException.call(this, "UnknownScanner")
  this.name = "UnknownScanner"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(UnknownScanner, Thrift.TException);
UnknownScanner.prototype.name = 'UnknownScanner';
UnknownScanner.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownScanner.prototype.write = function(output) {
  output.writeStructBegin('UnknownScanner');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownWriter = module.exports.UnknownWriter = function(args) {
  Thrift.TException.call(this, "UnknownWriter")
  this.name = "UnknownWriter"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(UnknownWriter, Thrift.TException);
UnknownWriter.prototype.name = 'UnknownWriter';
UnknownWriter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownWriter.prototype.write = function(output) {
  output.writeStructBegin('UnknownWriter');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoMoreEntriesException = module.exports.NoMoreEntriesException = function(args) {
  Thrift.TException.call(this, "NoMoreEntriesException")
  this.name = "NoMoreEntriesException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(NoMoreEntriesException, Thrift.TException);
NoMoreEntriesException.prototype.name = 'NoMoreEntriesException';
NoMoreEntriesException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoMoreEntriesException.prototype.write = function(output) {
  output.writeStructBegin('NoMoreEntriesException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloException = module.exports.AccumuloException = function(args) {
  Thrift.TException.call(this, "AccumuloException")
  this.name = "AccumuloException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(AccumuloException, Thrift.TException);
AccumuloException.prototype.name = 'AccumuloException';
AccumuloException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloException.prototype.write = function(output) {
  output.writeStructBegin('AccumuloException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccumuloSecurityException = module.exports.AccumuloSecurityException = function(args) {
  Thrift.TException.call(this, "AccumuloSecurityException")
  this.name = "AccumuloSecurityException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(AccumuloSecurityException, Thrift.TException);
AccumuloSecurityException.prototype.name = 'AccumuloSecurityException';
AccumuloSecurityException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccumuloSecurityException.prototype.write = function(output) {
  output.writeStructBegin('AccumuloSecurityException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableNotFoundException = module.exports.TableNotFoundException = function(args) {
  Thrift.TException.call(this, "TableNotFoundException")
  this.name = "TableNotFoundException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(TableNotFoundException, Thrift.TException);
TableNotFoundException.prototype.name = 'TableNotFoundException';
TableNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('TableNotFoundException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableExistsException = module.exports.TableExistsException = function(args) {
  Thrift.TException.call(this, "TableExistsException")
  this.name = "TableExistsException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(TableExistsException, Thrift.TException);
TableExistsException.prototype.name = 'TableExistsException';
TableExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableExistsException.prototype.write = function(output) {
  output.writeStructBegin('TableExistsException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MutationsRejectedException = module.exports.MutationsRejectedException = function(args) {
  Thrift.TException.call(this, "MutationsRejectedException")
  this.name = "MutationsRejectedException"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(MutationsRejectedException, Thrift.TException);
MutationsRejectedException.prototype.name = 'MutationsRejectedException';
MutationsRejectedException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationsRejectedException.prototype.write = function(output) {
  output.writeStructBegin('MutationsRejectedException');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

